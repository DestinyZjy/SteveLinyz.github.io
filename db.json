{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/custom.css","path":"css/custom.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/alipaylyz.jpg","path":"img/alipaylyz.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/wechatzjy.jpg","path":"img/wechatzjy.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/容器.md","hash":"32f031f22da89544c5d64a49e136f6101b79b585","modified":1625650640242},{"_id":"source/_posts/GitPR操作.md","hash":"b358f9b2d036b2ad5f8e284a2d1ed80b6ddaa156","modified":1625068468031},{"_id":"source/_posts/first-blog.md","hash":"066b3cfebf1e866223204d7daa5a577f4f249149","modified":1625213771558},{"_id":"source/tags/index.md","hash":"f950a767c3a782724295490dd6e21d1f0d283757","modified":1625056542754},{"_id":"source/_posts/枚举类和注解.md","hash":"708a2616943fb3384ddf056fa87946889fb70b80","modified":1625213815600},{"_id":"themes/butterfly/_config.yml","hash":"c8f47c8b086529fcb18fa496eda8e771113fe09a","modified":1625218474502},{"_id":"themes/butterfly/package.json","hash":"5cbda105782bd83b68174636844719d2ef4a1bd0","modified":1624784067000},{"_id":"themes/butterfly/languages/default.yml","hash":"7ca673fb629ea74f5ba5e75b4f0f95248cfb5090","modified":1624784067000},{"_id":"themes/butterfly/README_CN.md","hash":"459d6f3200863021bee1fe72a719aef236fb4090","modified":1624784067000},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"741e522b2387f94764a73844e7b084cc7e927c54","modified":1624784067000},{"_id":"themes/butterfly/.github/stale.yml","hash":"05a55a87fa7f122c59683e41c8b2e37e79f688f0","modified":1624784067000},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1624784067000},{"_id":"themes/butterfly/README.md","hash":"cedd13fcd8c75a68742265dd8eced4087e940ffd","modified":1624784067000},{"_id":"themes/butterfly/languages/en.yml","hash":"cd333235ff1648a6bf58dfafc81f2c57672a15a5","modified":1624784067000},{"_id":"themes/butterfly/layout/category.pug","hash":"60c1b795b6e227b5dd81963b51d29d1b81d0bf49","modified":1624784067000},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"79a50c40d9f5463f1fa42aa870ac6b8b84540412","modified":1624784067000},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1624784067000},{"_id":"themes/butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1624784067000},{"_id":"themes/butterfly/layout/page.pug","hash":"82aa988527a11835e7ac86ce4f23b8cd20014dfa","modified":1624784067000},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1624784067000},{"_id":"themes/butterfly/layout/post.pug","hash":"8d398c8925182699d9f2b9f1b727f06228488312","modified":1624784067000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"eff495eb1584cf4586e33c76e8b2fa6a469a179b","modified":1624784067000},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1624784067000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"30fefa017ed042ea479c33ae3db819cd097de560","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"4156224c47bfc2482281ac4e4df701c30476ff00","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"aa105ea4eaecc951f7474b549b6ac0095a5fab1f","modified":1624784067000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"476802922b774b679225102ac30a9d9183394701","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"6f2608c4d93d3d10ae6b2cd7f8918f303f024321","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1624784067000},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"2e0ce8901edb8abf011443c62a71bd01d7e607c3","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"2d0453adf92a3fd3466cf0793f14685d17b8b51d","modified":1624784067000},{"_id":"themes/butterfly/scripts/events/init.js","hash":"018aa446265fe627301b1d53d7cba4f4ff1960ac","modified":1624784067000},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"d575137c8779e50422c2416f4d0832fdea346ee6","modified":1624784067000},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"9821872007cf57efae4b728dc575ef9d004547bb","modified":1624784067000},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"4cc2d517195c8779471d326ada09f9371cbad4dd","modified":1624784067000},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1624784067000},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1624784067000},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"81459adf885a15c6e9784bc2275c07efe67ab0b4","modified":1624784067000},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"b816ded1451f28c7c54151ffe6c259b110253ae3","modified":1624784067000},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"1da73cd47b78c6dbc3f04ce500d6cc5711c94412","modified":1624784067000},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"54b9324e3506dcc9c9991ef5e11e37e66e21594f","modified":1624784067000},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"94826ea6bcc4d2304199adae12c4e2b272caf529","modified":1624784067000},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1624784067000},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"f33858ffb9e88191e644796e11d2f901eb332308","modified":1624784067000},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1624784067000},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":1624784067000},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"35f073021db93699fcac9ef351e26c59c31aadf7","modified":1624784067000},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1624784067000},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1624784067000},{"_id":"themes/butterfly/source/css/custom.css","hash":"ecc24efaf76f52b2da635c7cab7c5950ba3334c2","modified":1624928835666},{"_id":"themes/butterfly/source/css/var.styl","hash":"40c3f64422205a24e68ce1ad8fe8163f24fdd525","modified":1624784067000},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1624784067000},{"_id":"themes/butterfly/source/js/main.js","hash":"229c8abda75ab80b47e234ab7b81dca7d655441f","modified":1624784067000},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1624784067000},{"_id":"themes/butterfly/source/js/utils.js","hash":"41481019ef510c74e744f4f7ec4d0a13b5ccc04c","modified":1624784067000},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1624784067000},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"90d01b88d0f406d00184960b1afe9230aec2ebe6","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"4def0aab9e2172ad1f29abd1535d8e08ff23aa0b","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"889ef16fa34a39e5533bc170e62f20f3450cc522","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1624784067000},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"e55f8bdb876d5429a908498db1307b94094c0d06","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"24370508ee87f14418e8f06e9d79ad8c52a342c4","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"44d231314d4bfffdb93096c1fa18d05de7293267","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"c205b9fd72b2fe19e6d15c5b5ab0fb38c653032e","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"92f81a437c9db49f7ebcf608bc09488ecdb55a21","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"1f30952fed73dec21b42e2e30b7fe2e84618d2e4","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"4c3c5cb69b3aead8c232cb0fbc251929f28aad75","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"dbec869c62135695495703a29ad7655e9965d461","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"a3ee4523c2fe6356d70fe683c5bc7d5c9f558159","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"93d4ebc7dc8228c7a10ddeb5a553d0dcdabbe145","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"88e3b611b03149665e4113cfa39595c1a3fca7e5","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"5b404356f311d2ee36478291ca3553210867b738","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"b9d54a01d7c2a7a183cb7209e99430ce7fea1fe3","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d5fec7dedc52ab23865fb4db002755e9bdaadc9f","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"292646dfab135973b09f0fa9e3931e83da2ed30e","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"1ceef975993cec0050a1dcd05952ac95b3c59591","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"1fbecfd299068f90d727f0c8c65e2a792fa6e3e2","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"3d8e3706a056389176f55dd21956aabc78046761","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"d50e5c22cd6bc3c378bc581918136746cfa3447f","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"229c216fc027b7cf64e7afb61b2d6a040df65452","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"36b368516b5a746be84a6aa08767ee24d220d509","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"ae9336bf31cdad08ff586ead4295912a96563c76","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/widget/card_self.pug","hash":"a1b2f5575b6804c5c4b9288db143b5164cbbd289","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"0612aaee878f33ea8d3da0293c7dc3b6cd871466","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"9e91f2543ab39815309268d07ae248a78887acf9","modified":1624784067000},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"ce3d0c8984c8a46e3c8e1727806bb4d37ff3e2d4","modified":1624784067000},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"a5c3a61a1780c5f66e049de8534d6ca8249927e1","modified":1624784067000},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"fa7a4c1685f391d60ed863e869b9604b59746c27","modified":1624784067000},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"eda47f3e807a466ba8275627ea936c5100c43818","modified":1624784067000},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"4e629f510b73f998ab208b739c5bd7dcd168d1a7","modified":1624784067000},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"f59a9a0059d5261251bdd6de45aa97dd2d11e633","modified":1624784067000},{"_id":"themes/butterfly/source/css/_layout/404.styl","hash":"d6548e332e6e57e2a7ba2eb53cdd838c3cd1846d","modified":1624864020000},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"f1b63892baafa48ab872bc79671d57aafd511f6c","modified":1624784067000},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"6317bc18152e474b8faa7994fc5fbc3c9e455a84","modified":1624784067000},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1624784067000},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"dd8cdf639ba2b726437c77fa7aa8d5edbabe8f9b","modified":1624784067000},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"90fe01c968696a9f791cb2b84fca621cbbb56f47","modified":1624784067000},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"7d18a7be9cfea65091de3ef00014063d2d649912","modified":1624784067000},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"1fec1c2a94e2ff9437b3ae54b1e50644d7bafab0","modified":1625045236943},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"d748951d9fbcd04dda839085af78b01b8fa04cba","modified":1624784067000},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"0551c5893d1589a3d17ce161e50ecb1d724cc6e8","modified":1624784067000},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"ea1ba40dd5954c2ed718a126336fb7f94da4e66f","modified":1624784067000},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"7a072589e6097dbe942783131964f2372fdf1eb6","modified":1624784067000},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"7a6e1f21173022a3a1f18a62785cdd657a1af0a1","modified":1624784067000},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"788a28f68e29fad5328dc03be2f3268324281652","modified":1624784067000},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"6874adc2e276443f354bbe50d0072e9bec37243c","modified":1624784067000},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"e554549f0a0ae85362f0b0e8687981741f486f6b","modified":1624784067000},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"d60b7a94a7adeac489b8c1afdf7e679994829742","modified":1624784067000},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a6f8637e90e44e23338209d4a3438e3e67766971","modified":1624784067000},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"7c4152162a03aa8331a783df5695e4ebbb816a8c","modified":1624784067000},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9a881c031f463c486bd25248c2814fd09f97892b","modified":1624784067000},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"1c3f9d7efc3b9dfcfa8926a1132d0c44ffc7d4b2","modified":1624784067000},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"53ecae272e16223a436c497abbf25dd5f0fc4aaa","modified":1624784067000},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d0386ba6d8d63afc72b9673e8f3e89df6446ffc2","modified":1624784067000},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"21964fdd6d74ffbea519418bab65024aee5f3736","modified":1624784067000},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"6b05ca4409d2dc09e123af4e0af9f9d0f7142b73","modified":1624784067000},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"51f2bd03a2d0787911d0c090fb555a664b3fac8b","modified":1624784067000},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"89e744abc5e41f4855e7b87b13b854f4ec4ffc0e","modified":1624784067000},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1624784067000},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"f741e85295ce15c70a6027ec15a542636dd5dcca","modified":1624784067000},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"86fee274a62f7f034547342930f445c47378eb55","modified":1624784067000},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"1756791581c0ec51cb03353a09dac4778d944349","modified":1624784067000},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"e3bf847553515174f6085df982f0623e9783db7a","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"ef1b2b5b980d6aeaa5d06b97d1afc9644b155a16","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"bba9871f446c10ffcc8fa9023f5a2eb701a86bae","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"a4da2fcdc7f369bea8295282d51b1c65a4516259","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1624784067000},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"459e2541afda483916d16fce4aaa56b41bcd42ba","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1624784067000},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"2e52c64e89f16267596a8465841dd46f51820982","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"a111407fdcafcf1099e26ffa69786f8822c5d9fb","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"353ebd0bdecdfde6dee32c3aa208cc87c72b15c0","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0b7571919e8ad51285deda56a1868fccf8c563d7","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"da9813f8dc0d388869c15413cf056012cfb69e1a","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"bafb3d5710824caa59a56017afb058fd2b4eac65","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"b871ea208e36398b4d668db9a9a0b61c79415381","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"16378d8646ea3f4ac99c18f0296dd85b13f9d775","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"2b45fe09d5b591dca156b76dae99981f8d8e1c61","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"21b7ec96c606823d3d72e72775495ef77502b4cb","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"45287f6f816ede3eca9c73a02ef2b968592bee3d","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"4afc12ce42d067fa4012039aa444343a36f73599","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"3f3a3cd8bea2103dedd754f767aca5cb84d5f586","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"9820d731bb66a1d9c2e0083361d0c99c68c93fdf","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"b1046b829e93225404349930ef0a216a8d81c47e","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"18dcf05ab58107bbff426376aef2577f59583fc2","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"cb38ffe911023092a90a28f2ba8317a92b22cd0c","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"59b4c26a827ace5a54855881d199977103ff6f50","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"31c52ad597943907ee6489bf9505c2c196d6fdc8","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"d8f59e94eafc669c49349561dc5bbea3915aecb7","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"613280d61b8ab9612014ec016ae3d3698d36fd1a","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"309f51bc5302e72fc469d54c577fbcfe57fb07a8","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1624784067000},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"006acc91ce25fc7c7d778ca043e970f57dc46b83","modified":1624784067000},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"8c0726fb8d9a497d2f900b0be2845efaa68e3d87","modified":1624784067000},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"89cbcc8e087788ecec18b5fa58710afacdb7d080","modified":1624784067000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"e0e7065124ef0d99f8322a47bc47838982e04ad0","modified":1624784067000},{"_id":"themes/butterfly/source/img/alipaylyz.jpg","hash":"7d4161611a779749c5372505d1b0753d6fd1083c","modified":1625211770742},{"_id":"themes/butterfly/source/img/wechatzjy.jpg","hash":"b5ec3f9d1af3486444acb1701e7522eed3823ea0","modified":1625068759316},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1624784067000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1624784067000},{"_id":"public/tags/index.html","hash":"884edcd0ef5e75b294257b0a3317ab7d77492e9d","modified":1625650685884},{"_id":"public/2021/07/07/容器/index.html","hash":"de198c5ad07726fd57c76ca8526fac0d8f92a43b","modified":1625650685884},{"_id":"public/2021/06/30/GitPR操作/index.html","hash":"7a302b378174ccfab44bff8889e9f58dfadedf77","modified":1625650685884},{"_id":"public/2021/06/27/first-blog/index.html","hash":"7bf3b0aef6e681317feaaa5c6a48e7e9d67e501d","modified":1625650685884},{"_id":"public/2021/06/27/枚举类和注解/index.html","hash":"0345729f7325e9e93b13811d9706fd1790fdd625","modified":1625650685884},{"_id":"public/archives/index.html","hash":"e2a2b7355195c3db7aba27552db7d3fadd19913e","modified":1625650685884},{"_id":"public/archives/2021/index.html","hash":"1d7cb30fb82b60e4b53b4e459113a51a9ca5e2ca","modified":1625650685884},{"_id":"public/archives/2021/06/index.html","hash":"18a3574f800458490bcb90517385a88bf25af0e2","modified":1625650685884},{"_id":"public/archives/2021/07/index.html","hash":"0accd0debc41dd7b859e5211023f12fe06ca15b9","modified":1625650685884},{"_id":"public/index.html","hash":"c7cd23e89e502503987cb85b40073e90944bf0f0","modified":1625650685884},{"_id":"public/tags/Git/index.html","hash":"08a2f99d602ff7ab315a2f0993bc13b4afa034c7","modified":1625650685884},{"_id":"public/tags/Linux/index.html","hash":"a0a562c52a2c4d9f9b7b308df7597a166a996d0f","modified":1625650685884},{"_id":"public/tags/Hexo/index.html","hash":"31543d387cdf3d3293ce25260d76f0daaf9a31cf","modified":1625650685884},{"_id":"public/tags/blog/index.html","hash":"b83ef186d4f39a4e4ac52e7150af87eb22913667","modified":1625650685884},{"_id":"public/tags/Java/index.html","hash":"7df0fc1bdd7697f4e357ec734e6ee6f0835c7bb8","modified":1625650685884},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1625650685884},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1625650685884},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1625650685884},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1625650685884},{"_id":"public/live2dw/assets/hijiki.model.json","hash":"feff43bf7498d213982c3736c2c029664e4bcbd2","modified":1625650685884},{"_id":"public/live2dw/assets/hijiki.pose.json","hash":"81438bf69b32c7c11e311b4fe043730cdc7b7ec2","modified":1625650685884},{"_id":"public/live2dw/assets/mtn/00_idle.mtn","hash":"b224c60e463b9f71ddbfc0c720e430496c175f4f","modified":1625650685884},{"_id":"public/live2dw/assets/mtn/03.mtn","hash":"f900737c7a98441cbb2e05255427e6260e19ae68","modified":1625650685884},{"_id":"public/live2dw/assets/mtn/04.mtn","hash":"c7a25d3c5d783639bae18db2f3cd284b819c3c85","modified":1625650685884},{"_id":"public/live2dw/assets/mtn/01.mtn","hash":"fb550833ae22c9954c3e01df37ed29b2d61700f2","modified":1625650685884},{"_id":"public/live2dw/assets/mtn/02.mtn","hash":"7eafc52edc73b7cb80ae70d34b43c6ac778fa47b","modified":1625650685884},{"_id":"public/live2dw/assets/mtn/05.mtn","hash":"dd20ad24b5d1830a5d44b9bccb28f922eea5e0e5","modified":1625650685884},{"_id":"public/live2dw/assets/mtn/06.mtn","hash":"ad404bd852d276cdd3d054c953e23f90e4e45ae1","modified":1625650685884},{"_id":"public/live2dw/assets/mtn/07.mtn","hash":"b7f2e3a9fa4f3ffbb6e64a08f8d9f45ca1868ffb","modified":1625650685884},{"_id":"public/live2dw/assets/mtn/08.mtn","hash":"4411c7651ff65195b113d95e7d5ebef8a59a37d9","modified":1625650685884},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1625650685884},{"_id":"public/img/wechatzjy.jpg","hash":"b5ec3f9d1af3486444acb1701e7522eed3823ea0","modified":1625650685884},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1625650685884},{"_id":"public/img/alipaylyz.jpg","hash":"7d4161611a779749c5372505d1b0753d6fd1083c","modified":1625650685884},{"_id":"public/live2dw/assets/moc/hijiki.moc","hash":"44289e62545a7046e0f5231103a851750b78524e","modified":1625650685884},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1625650685884},{"_id":"public/css/custom.css","hash":"55a10d8b530f4af9f3fe3c2f8ddf583c9bbe4d0e","modified":1625650685884},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1625650685884},{"_id":"public/js/search/local-search.js","hash":"459e2541afda483916d16fce4aaa56b41bcd42ba","modified":1625650685884},{"_id":"public/js/utils.js","hash":"41481019ef510c74e744f4f7ec4d0a13b5ccc04c","modified":1625650685884},{"_id":"public/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1625650685884},{"_id":"public/css/index.css","hash":"f7c6e19be58fd0c27c945ce987f343011ca7fbac","modified":1625650685884},{"_id":"public/js/main.js","hash":"229c8abda75ab80b47e234ab7b81dca7d655441f","modified":1625650685884},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1625650685884},{"_id":"public/live2dw/assets/moc/hijiki.2048/texture_00.png","hash":"66464e0d96439695b5542c5e2f5be60739c29999","modified":1625650685884},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1625650685884}],"Category":[],"Data":[],"Page":[{"title":"L&Z","date":"2021-06-30T12:21:56.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: L&Z\ndate: 2021-06-30 20:21:56\ntype: \"tags\"\n---\n","updated":"2021-06-30T12:35:42.754Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckqtag2ud0000mkvn8t7k22rp","content":"","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""}],"Post":[{"title":"Pull Request操作","date":"2021-06-29T16:00:00.000Z","cover":"https://images.pexels.com/photos/749102/pexels-photo-749102.jpeg?auto=compress&cs=tinysrgb&h=750&w=1260","copyright_author":"SteveLin","_content":"\n\n\n# pull request的含义\n\npull request是一项属于GitHub的操作，简单地可以解释为合并请求。\n\n> 用类比的方法来解释一下 pull reqeust。想想我们中学考试，老师改卷的场景吧。你做的试卷就像仓库，你的试卷肯定会有很多错误，就相当于程序里的 bug。老师把你的试卷拿过来，相当于先 fork。在你的卷子上做一些修改批注，相当于 git commit。最后把改好的试卷给你，相当于发 pull request，你拿到试卷重新改正错误，相当于 merge。\n\n当你想与伙伴一同协作开发代码时，你需要用到pull request。\n\n# 实现步骤\n\n小林和小朱要一起开发一个项目。小林作为项目发起者，在GitHub上创建了一个Repository并push了代码。小朱要怎么做呢？\n\n## folk仓库\n\n小朱folk了小林的Repository到自己的仓库，并且Clone已经在**自己仓库中的代码**到本地。\n\n```bash\n$ git clone git@github.com:DestinyZjy/SteveLinyz.github.io.git\n```\n\n## 查看当前链接情况\n\n小林使用命令查看了小林本地的Repository与哪些远程仓库建立了链接，发现只与自己的Githubd的Repository建立链接。\n\n```bash\n$ git remote -v\n```\n\n![image-20210630200816105](https://gitee.com/steve-lin08/image-host/raw/master/20210630200816.png)\n\n## 与小朱在Github上的Repository建立链接\n\n现在使用命令来与小朱的Repository建立链接：\n\n```bash\ngit remote add upstrean https://github.com/DestinyZjy/SteveLinyz.github.io\n```\n\n![image-20210630201129537](https://gitee.com/steve-lin08/image-host/raw/master/20210630201129.png)\n\n## 对代码进行修改\n\n### 新建分支\n\n使用命令来新建一个分支，并切换到此分支\n\n```bash\ngit checkout -b ZJY\n```\n\n### 修改代码\n\n小朱对着电脑码了一下午代码，终于完成了小林爸爸的需求。\n\n### 提交\n\n通过命令，小朱在terminal完成了代码的推送，到了自己Github的Repository\n\n```bash\ngit add xxx\ngit commit -m \"xxx\"\ngit push origin ZJY\n```\n\n## 发起Pull Request\n\n小朱到Github上自己的Repository，点击Pull request - New pull request。\n\n![](https://gitee.com/steve-lin08/image-host/raw/master/20210630201924.png)\n\n她选择把ZJY分支的代码提交到小林Repository中的xiaozhu分支，她写下：球球你了帅哥。并且发送了合并请求。\n\n## 同意Merge请求\n\n小林看到了小朱的合并请求，他查看了代码，十分满意，便同意了请求。\n\n结果就是：小林的Repository中的xiaozhu分支，与小朱的ZJY分支完成了合并，小朱成功完成了她的任务！","source":"_posts/GitPR操作.md","raw":"---\ntitle: Pull Request操作\ndate: 2021.6.30\ntags:\n    - Git\ncover: https://images.pexels.com/photos/749102/pexels-photo-749102.jpeg?auto=compress&cs=tinysrgb&h=750&w=1260\ncopyright_author: SteveLin\n\n---\n\n\n\n# pull request的含义\n\npull request是一项属于GitHub的操作，简单地可以解释为合并请求。\n\n> 用类比的方法来解释一下 pull reqeust。想想我们中学考试，老师改卷的场景吧。你做的试卷就像仓库，你的试卷肯定会有很多错误，就相当于程序里的 bug。老师把你的试卷拿过来，相当于先 fork。在你的卷子上做一些修改批注，相当于 git commit。最后把改好的试卷给你，相当于发 pull request，你拿到试卷重新改正错误，相当于 merge。\n\n当你想与伙伴一同协作开发代码时，你需要用到pull request。\n\n# 实现步骤\n\n小林和小朱要一起开发一个项目。小林作为项目发起者，在GitHub上创建了一个Repository并push了代码。小朱要怎么做呢？\n\n## folk仓库\n\n小朱folk了小林的Repository到自己的仓库，并且Clone已经在**自己仓库中的代码**到本地。\n\n```bash\n$ git clone git@github.com:DestinyZjy/SteveLinyz.github.io.git\n```\n\n## 查看当前链接情况\n\n小林使用命令查看了小林本地的Repository与哪些远程仓库建立了链接，发现只与自己的Githubd的Repository建立链接。\n\n```bash\n$ git remote -v\n```\n\n![image-20210630200816105](https://gitee.com/steve-lin08/image-host/raw/master/20210630200816.png)\n\n## 与小朱在Github上的Repository建立链接\n\n现在使用命令来与小朱的Repository建立链接：\n\n```bash\ngit remote add upstrean https://github.com/DestinyZjy/SteveLinyz.github.io\n```\n\n![image-20210630201129537](https://gitee.com/steve-lin08/image-host/raw/master/20210630201129.png)\n\n## 对代码进行修改\n\n### 新建分支\n\n使用命令来新建一个分支，并切换到此分支\n\n```bash\ngit checkout -b ZJY\n```\n\n### 修改代码\n\n小朱对着电脑码了一下午代码，终于完成了小林爸爸的需求。\n\n### 提交\n\n通过命令，小朱在terminal完成了代码的推送，到了自己Github的Repository\n\n```bash\ngit add xxx\ngit commit -m \"xxx\"\ngit push origin ZJY\n```\n\n## 发起Pull Request\n\n小朱到Github上自己的Repository，点击Pull request - New pull request。\n\n![](https://gitee.com/steve-lin08/image-host/raw/master/20210630201924.png)\n\n她选择把ZJY分支的代码提交到小林Repository中的xiaozhu分支，她写下：球球你了帅哥。并且发送了合并请求。\n\n## 同意Merge请求\n\n小林看到了小朱的合并请求，他查看了代码，十分满意，便同意了请求。\n\n结果就是：小林的Repository中的xiaozhu分支，与小朱的ZJY分支完成了合并，小朱成功完成了她的任务！","slug":"GitPR操作","published":1,"updated":"2021-06-30T15:54:28.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqtag2uh0001mkvnc8mwhao0","content":"<h1 id=\"pull-request的含义\"><a href=\"#pull-request的含义\" class=\"headerlink\" title=\"pull request的含义\"></a>pull request的含义</h1><p>pull request是一项属于GitHub的操作，简单地可以解释为合并请求。</p>\n<blockquote>\n<p>用类比的方法来解释一下 pull reqeust。想想我们中学考试，老师改卷的场景吧。你做的试卷就像仓库，你的试卷肯定会有很多错误，就相当于程序里的 bug。老师把你的试卷拿过来，相当于先 fork。在你的卷子上做一些修改批注，相当于 git commit。最后把改好的试卷给你，相当于发 pull request，你拿到试卷重新改正错误，相当于 merge。</p>\n</blockquote>\n<p>当你想与伙伴一同协作开发代码时，你需要用到pull request。</p>\n<h1 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h1><p>小林和小朱要一起开发一个项目。小林作为项目发起者，在GitHub上创建了一个Repository并push了代码。小朱要怎么做呢？</p>\n<h2 id=\"folk仓库\"><a href=\"#folk仓库\" class=\"headerlink\" title=\"folk仓库\"></a>folk仓库</h2><p>小朱folk了小林的Repository到自己的仓库，并且Clone已经在<strong>自己仓库中的代码</strong>到本地。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:DestinyZjy/SteveLinyz.github.io.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看当前链接情况\"><a href=\"#查看当前链接情况\" class=\"headerlink\" title=\"查看当前链接情况\"></a>查看当前链接情况</h2><p>小林使用命令查看了小林本地的Repository与哪些远程仓库建立了链接，发现只与自己的Githubd的Repository建立链接。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote -v</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/steve-lin08/image-host/raw/master/20210630200816.png\" alt=\"image-20210630200816105\"></p>\n<h2 id=\"与小朱在Github上的Repository建立链接\"><a href=\"#与小朱在Github上的Repository建立链接\" class=\"headerlink\" title=\"与小朱在Github上的Repository建立链接\"></a>与小朱在Github上的Repository建立链接</h2><p>现在使用命令来与小朱的Repository建立链接：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add upstrean https://github.com/DestinyZjy/SteveLinyz.github.io</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/steve-lin08/image-host/raw/master/20210630201129.png\" alt=\"image-20210630201129537\"></p>\n<h2 id=\"对代码进行修改\"><a href=\"#对代码进行修改\" class=\"headerlink\" title=\"对代码进行修改\"></a>对代码进行修改</h2><h3 id=\"新建分支\"><a href=\"#新建分支\" class=\"headerlink\" title=\"新建分支\"></a>新建分支</h3><p>使用命令来新建一个分支，并切换到此分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b ZJY</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改代码\"><a href=\"#修改代码\" class=\"headerlink\" title=\"修改代码\"></a>修改代码</h3><p>小朱对着电脑码了一下午代码，终于完成了小林爸爸的需求。</p>\n<h3 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h3><p>通过命令，小朱在terminal完成了代码的推送，到了自己Github的Repository</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add xxx</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;xxx&quot;</span></span><br><span class=\"line\">git push origin ZJY</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"发起Pull-Request\"><a href=\"#发起Pull-Request\" class=\"headerlink\" title=\"发起Pull Request\"></a>发起Pull Request</h2><p>小朱到Github上自己的Repository，点击Pull request - New pull request。</p>\n<p><img src=\"https://gitee.com/steve-lin08/image-host/raw/master/20210630201924.png\"></p>\n<p>她选择把ZJY分支的代码提交到小林Repository中的xiaozhu分支，她写下：球球你了帅哥。并且发送了合并请求。</p>\n<h2 id=\"同意Merge请求\"><a href=\"#同意Merge请求\" class=\"headerlink\" title=\"同意Merge请求\"></a>同意Merge请求</h2><p>小林看到了小朱的合并请求，他查看了代码，十分满意，便同意了请求。</p>\n<p>结果就是：小林的Repository中的xiaozhu分支，与小朱的ZJY分支完成了合并，小朱成功完成了她的任务！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"pull-request的含义\"><a href=\"#pull-request的含义\" class=\"headerlink\" title=\"pull request的含义\"></a>pull request的含义</h1><p>pull request是一项属于GitHub的操作，简单地可以解释为合并请求。</p>\n<blockquote>\n<p>用类比的方法来解释一下 pull reqeust。想想我们中学考试，老师改卷的场景吧。你做的试卷就像仓库，你的试卷肯定会有很多错误，就相当于程序里的 bug。老师把你的试卷拿过来，相当于先 fork。在你的卷子上做一些修改批注，相当于 git commit。最后把改好的试卷给你，相当于发 pull request，你拿到试卷重新改正错误，相当于 merge。</p>\n</blockquote>\n<p>当你想与伙伴一同协作开发代码时，你需要用到pull request。</p>\n<h1 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h1><p>小林和小朱要一起开发一个项目。小林作为项目发起者，在GitHub上创建了一个Repository并push了代码。小朱要怎么做呢？</p>\n<h2 id=\"folk仓库\"><a href=\"#folk仓库\" class=\"headerlink\" title=\"folk仓库\"></a>folk仓库</h2><p>小朱folk了小林的Repository到自己的仓库，并且Clone已经在<strong>自己仓库中的代码</strong>到本地。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:DestinyZjy/SteveLinyz.github.io.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看当前链接情况\"><a href=\"#查看当前链接情况\" class=\"headerlink\" title=\"查看当前链接情况\"></a>查看当前链接情况</h2><p>小林使用命令查看了小林本地的Repository与哪些远程仓库建立了链接，发现只与自己的Githubd的Repository建立链接。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote -v</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/steve-lin08/image-host/raw/master/20210630200816.png\" alt=\"image-20210630200816105\"></p>\n<h2 id=\"与小朱在Github上的Repository建立链接\"><a href=\"#与小朱在Github上的Repository建立链接\" class=\"headerlink\" title=\"与小朱在Github上的Repository建立链接\"></a>与小朱在Github上的Repository建立链接</h2><p>现在使用命令来与小朱的Repository建立链接：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add upstrean https://github.com/DestinyZjy/SteveLinyz.github.io</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/steve-lin08/image-host/raw/master/20210630201129.png\" alt=\"image-20210630201129537\"></p>\n<h2 id=\"对代码进行修改\"><a href=\"#对代码进行修改\" class=\"headerlink\" title=\"对代码进行修改\"></a>对代码进行修改</h2><h3 id=\"新建分支\"><a href=\"#新建分支\" class=\"headerlink\" title=\"新建分支\"></a>新建分支</h3><p>使用命令来新建一个分支，并切换到此分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b ZJY</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改代码\"><a href=\"#修改代码\" class=\"headerlink\" title=\"修改代码\"></a>修改代码</h3><p>小朱对着电脑码了一下午代码，终于完成了小林爸爸的需求。</p>\n<h3 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h3><p>通过命令，小朱在terminal完成了代码的推送，到了自己Github的Repository</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add xxx</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;xxx&quot;</span></span><br><span class=\"line\">git push origin ZJY</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"发起Pull-Request\"><a href=\"#发起Pull-Request\" class=\"headerlink\" title=\"发起Pull Request\"></a>发起Pull Request</h2><p>小朱到Github上自己的Repository，点击Pull request - New pull request。</p>\n<p><img src=\"https://gitee.com/steve-lin08/image-host/raw/master/20210630201924.png\"></p>\n<p>她选择把ZJY分支的代码提交到小林Repository中的xiaozhu分支，她写下：球球你了帅哥。并且发送了合并请求。</p>\n<h2 id=\"同意Merge请求\"><a href=\"#同意Merge请求\" class=\"headerlink\" title=\"同意Merge请求\"></a>同意Merge请求</h2><p>小林看到了小朱的合并请求，他查看了代码，十分满意，便同意了请求。</p>\n<p>结果就是：小林的Repository中的xiaozhu分支，与小朱的ZJY分支完成了合并，小朱成功完成了她的任务！</p>\n"},{"title":"Linux + Hexo + Github 搭建个人博客","date":"2021-06-26T16:00:00.000Z","cover":"https://images.pexels.com/photos/691668/pexels-photo-691668.jpeg?auto=compress&cs=tinysrgb&dpr=2&w=500","top_img":"linear-gradient(20deg, #0062be, #925696, #cc426e, #fb0347)","copyright_author":"SteveLin","toc_number":false,"_content":"\n\n\n## 1.  安装Git\n\n> [root@ ~]# yum install -y git  \n\n## 2.  安装node.js\n\n进入官网：http://nodejs.cn/download/ \n\n注意：一定要下载**最新版**\n\n### 2.1 二进制包下载：\n\n> [root@iZuf68enovvnl1qpz1bvdoZ software]# pwd\n> /app/software\n>\n> [root@steve]# wget https://npm.taobao.org/mirrors/node/v16.4.0/node-v16.4.0-linux-x64.tar.xz\n\n### 2.2 下载到software目录后解压：\n\n> [root@iZuf68enovvnl1qpz1bvdoZ software]# tar xf node-v16.4.0-linux-x64.tar.xz \n\n### 2.3 添加node的环境变量，在最后一行加入PATH\n\n> vi /etc/profile #最后一行加入PATH \n>\n> export PATH=$PATH:/home/www/node-v16.4.0-linux-x64/bin\n\n### 2.4 使/etc/profile里的配置立即生效\n\n> source /etc/profile\n\n### 2.5 查看版本信息\n\n> [root@iZuf68enovvnl1qpz1bvdoZ bin]# ./node -v\n> v16.4.0\n\n### 2.6 创建软连接\n\n> [root@uf68enovvnl1qpz1bvdoZ bin]# ln -s /app/software/node-v16.4.0-linux-x64/bin/node /usr/local/bin/node\n> [root@uf68enovvnl1qpz1bvdoZ bin]# ln -s /app/software/node-v16.4.0-linux-x64/bin/npm /usr/local/bin/npm\n\n使node 和 npm可以使用。\n\n## 3.  hexo部署\n\n### 3.1 安装hexo\n\n> [root@iZuf68enovvnl1qpz1bvdoZ bin]# npm install hexo-cli -g\n\n### 3.2 将 hexo 命令添加到全局，采用软连接方式\n\n``` bash\n[root@iZuf68enovvnl1qpz1bvdoZ bin]# ln -s /app/software/node-v16.4.0-linux-x64/lib/node_modules/hexo-cli/bin/hexo /usr/local/bin/hexo\n```\n\n### 3.3 init hexo\n\n创建一个hexo目录，并初始化。\n\n```bash \n[root@iZuf68enovvnl1qpz1bvdoZ software]# mkdir hexo\n[root@iZuf68enovvnl1qpz1bvdoZ software]# cd hexo\n[root@iZuf68enovvnl1qpz1bvdoZ hexo]# hexo init\n```\n\n### 3.4 启动测试环境\n\n```bash\n[root@iZuf68enovvnl1qpz1bvdoZ hexo]# hexo g\n[root@iZuf68enovvnl1qpz1bvdoZ hexo]# hexo s\nNFO  Validating config\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.\n```\n\n### 3.5 遗留问题\n\n启动后显示Hexo运行在http://localhost:4000中，但Windows下无法访问。\n\n## 4. 新建一篇博客\n\n## 5. 部署到github\n\n### 5.1 new一个仓库\n\n<img src=\"https://raw.githubusercontent.com/SteveLinyz/image-host-for-typora/master/img/20210627022222.png\" alt=\"image-20210627022222438\" style=\"zoom:80%;\" />\n\n两个名字需要一样，注意结尾名称。\n\n### 5.2 开启Github pages\n\n进入仓库 - settings - page ，已默认开启Github pages，选择一个主题，即可访问\n\n> SteveLinyz.github.io\n\n### 5.3 在github上部署SSH keys信息\n\n为了能将个人博客服务器上的博客数据推送到 GitHub，达到数据永久保存效果，我们需要把博客服务器的 SSH keys 信息在 GitHub 上添加信任。\n\n**首先，我们要在本地服务器上创建SSH-key信息:输入命令后一直回车。**\n\n```bash\n[root@iZuf68enovvnl1qpz1bvdoZ /]# ssh-keygen -t rsassh-keygen -t rsa\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/root/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /root/.ssh/id_rsa.\nYour public key has been saved in /root/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:4SzlGFviy1NdMzshsnW9z7WXntRSEJe5k3Ipyd3Ycgk root@iZuf68enovvnl1qpz1bvdoZ\nThe key's randomart image is:\n+---[RSA 2048]----+\n|              . +|\n|             E = |\n|      o = o K *o*|\n|     . @ * + Xo@+|\n|      = S . o =o+|\n|      . +    . +=|\n|      +       .+=|\n|       .      o.o|\n|               o |\n+----[SHA256]-----+\n```\n\n**之后查看SSH：**\n\n```bash\n[root@iZuf68enovvnl1qpz1bvdoZ ~]# cd .ssh/\n[root@iZuf68enovvnl1qpz1bvdoZ .ssh]# cat id_rsa.pub\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCWK+X3w3ODYagL6FyhNREZWcWZY/3Y709GKYXVFZrXTsJx/zDVOtKKQW97WIX8Nw4/36jo6AY9jWKWwEyjiuTBQILmq9imowBHETVS5ETqbZlINY2oUmyfY9IVlBAJ/paERzS8kik/8Fi5RralQddAQV9k3/L/tTHY1CPxS+W6zFksfH2kgvpDGZBK5PvCjKHxFaYnN5wBjfGt5HIbVoeSLlg8XMNCbwPBEPweDUWsAncfA4cJ+1doNdah0jcQM3LwVIdwl2itEKnwq8WuHkR+DEGpRxA1Xon+tWNHvY9tnFWZf3/8jWY36W4EK5Rwqw2aELeVGvKnS4ybH7EPk7tP root@iZuf68enovvnl1qpz1bvdoZ\n```\n\n**添加SSH key到github上：**\n\nSettings - SSH and GPG keys - new SSH key\n\n<img src=\"https://raw.githubusercontent.com/SteveLinyz/image-host-for-typora/master/img/20210627022915.png\" alt=\"image-20210627022915182\" style=\"zoom:80%;\" />\n\n**连接测试：**\n\n```bash\n[root@iZuf68enovvnl1qpz1bvdoZ ~]# ssh -T git@github.com\nThe authenticity of host 'github.com (13.250.177.223)' can't be established.\nRSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.\nRSA key fingerprint is MD5:16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added 'github.com,13.250.177.223' (RSA) to the list of known hosts.\nHi SteveLinyz! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n这样就连接成功了。\n\n**设置账号信息：**\n\n```bahs\n[root@iZuf68enovvnl1qpz1bvdoZ /]# cd app/software/hexo\n[root@iZuf68enovvnl1qpz1bvdoZ hexo]# git config --global user.name \"SteveLinyz\"\n[root@iZuf68enovvnl1qpz1bvdoZ hexo]# git config --global user.email \"1143771616@qq.com\"\n```\n\n这里的用户名和邮箱，应该和Github上的账户邮箱保持一致，防止之后同步的不一致。\n\n### 5.4 Hexo部署到Github Pages\n\n#### 5.4.1 _config.yml 配置修改\n\n```bash\n[root@iZuf68enovvnl1qpz1bvdoZ hexo]# vim _config.yml\n………………\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html  # 修改或添加如下信息\ndeploy:\n  type: git\n  repo: git@github.com:SteveLinyz/stevelinyz.github.io.git\n  branch: main\n```\n\n注意，github改版后默认分支都为main。\n\n#### 5.4.2 安装扩展\n\n部署到GitHub之前，还需要安装如下扩展：\n\n```bash\n[root@iZuf68enovvnl1qpz1bvdoZ hexo]# npm install hexo-deployer-git --save\n```\n\n#### 5.4.3 部署到Github\n\n```bahs\n[root@iZuf68enovvnl1qpz1bvdoZ hexo]# hexo d -g \n# 部署前，先生成静态文件  -g 可选\n[root@iZuf68enovvnl1qpz1bvdoZ hexo]# hexo s\n```\n\n启动服务之后即可在GitHub page中看到更新文章。\n","source":"_posts/first-blog.md","raw":"---\ntitle: Linux + Hexo + Github 搭建个人博客\ntags: \n    - Linux\n    - Hexo\n    - Git\n    - blog\ndate: 2021.6.27\ncover: https://images.pexels.com/photos/691668/pexels-photo-691668.jpeg?auto=compress&cs=tinysrgb&dpr=2&w=500\ntop_img: 'linear-gradient(20deg, #0062be, #925696, #cc426e, #fb0347)'\ncopyright_author: SteveLin\ntoc_number: false\n\n---\n\n\n\n## 1.  安装Git\n\n> [root@ ~]# yum install -y git  \n\n## 2.  安装node.js\n\n进入官网：http://nodejs.cn/download/ \n\n注意：一定要下载**最新版**\n\n### 2.1 二进制包下载：\n\n> [root@iZuf68enovvnl1qpz1bvdoZ software]# pwd\n> /app/software\n>\n> [root@steve]# wget https://npm.taobao.org/mirrors/node/v16.4.0/node-v16.4.0-linux-x64.tar.xz\n\n### 2.2 下载到software目录后解压：\n\n> [root@iZuf68enovvnl1qpz1bvdoZ software]# tar xf node-v16.4.0-linux-x64.tar.xz \n\n### 2.3 添加node的环境变量，在最后一行加入PATH\n\n> vi /etc/profile #最后一行加入PATH \n>\n> export PATH=$PATH:/home/www/node-v16.4.0-linux-x64/bin\n\n### 2.4 使/etc/profile里的配置立即生效\n\n> source /etc/profile\n\n### 2.5 查看版本信息\n\n> [root@iZuf68enovvnl1qpz1bvdoZ bin]# ./node -v\n> v16.4.0\n\n### 2.6 创建软连接\n\n> [root@uf68enovvnl1qpz1bvdoZ bin]# ln -s /app/software/node-v16.4.0-linux-x64/bin/node /usr/local/bin/node\n> [root@uf68enovvnl1qpz1bvdoZ bin]# ln -s /app/software/node-v16.4.0-linux-x64/bin/npm /usr/local/bin/npm\n\n使node 和 npm可以使用。\n\n## 3.  hexo部署\n\n### 3.1 安装hexo\n\n> [root@iZuf68enovvnl1qpz1bvdoZ bin]# npm install hexo-cli -g\n\n### 3.2 将 hexo 命令添加到全局，采用软连接方式\n\n``` bash\n[root@iZuf68enovvnl1qpz1bvdoZ bin]# ln -s /app/software/node-v16.4.0-linux-x64/lib/node_modules/hexo-cli/bin/hexo /usr/local/bin/hexo\n```\n\n### 3.3 init hexo\n\n创建一个hexo目录，并初始化。\n\n```bash \n[root@iZuf68enovvnl1qpz1bvdoZ software]# mkdir hexo\n[root@iZuf68enovvnl1qpz1bvdoZ software]# cd hexo\n[root@iZuf68enovvnl1qpz1bvdoZ hexo]# hexo init\n```\n\n### 3.4 启动测试环境\n\n```bash\n[root@iZuf68enovvnl1qpz1bvdoZ hexo]# hexo g\n[root@iZuf68enovvnl1qpz1bvdoZ hexo]# hexo s\nNFO  Validating config\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.\n```\n\n### 3.5 遗留问题\n\n启动后显示Hexo运行在http://localhost:4000中，但Windows下无法访问。\n\n## 4. 新建一篇博客\n\n## 5. 部署到github\n\n### 5.1 new一个仓库\n\n<img src=\"https://raw.githubusercontent.com/SteveLinyz/image-host-for-typora/master/img/20210627022222.png\" alt=\"image-20210627022222438\" style=\"zoom:80%;\" />\n\n两个名字需要一样，注意结尾名称。\n\n### 5.2 开启Github pages\n\n进入仓库 - settings - page ，已默认开启Github pages，选择一个主题，即可访问\n\n> SteveLinyz.github.io\n\n### 5.3 在github上部署SSH keys信息\n\n为了能将个人博客服务器上的博客数据推送到 GitHub，达到数据永久保存效果，我们需要把博客服务器的 SSH keys 信息在 GitHub 上添加信任。\n\n**首先，我们要在本地服务器上创建SSH-key信息:输入命令后一直回车。**\n\n```bash\n[root@iZuf68enovvnl1qpz1bvdoZ /]# ssh-keygen -t rsassh-keygen -t rsa\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/root/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /root/.ssh/id_rsa.\nYour public key has been saved in /root/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:4SzlGFviy1NdMzshsnW9z7WXntRSEJe5k3Ipyd3Ycgk root@iZuf68enovvnl1qpz1bvdoZ\nThe key's randomart image is:\n+---[RSA 2048]----+\n|              . +|\n|             E = |\n|      o = o K *o*|\n|     . @ * + Xo@+|\n|      = S . o =o+|\n|      . +    . +=|\n|      +       .+=|\n|       .      o.o|\n|               o |\n+----[SHA256]-----+\n```\n\n**之后查看SSH：**\n\n```bash\n[root@iZuf68enovvnl1qpz1bvdoZ ~]# cd .ssh/\n[root@iZuf68enovvnl1qpz1bvdoZ .ssh]# cat id_rsa.pub\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCWK+X3w3ODYagL6FyhNREZWcWZY/3Y709GKYXVFZrXTsJx/zDVOtKKQW97WIX8Nw4/36jo6AY9jWKWwEyjiuTBQILmq9imowBHETVS5ETqbZlINY2oUmyfY9IVlBAJ/paERzS8kik/8Fi5RralQddAQV9k3/L/tTHY1CPxS+W6zFksfH2kgvpDGZBK5PvCjKHxFaYnN5wBjfGt5HIbVoeSLlg8XMNCbwPBEPweDUWsAncfA4cJ+1doNdah0jcQM3LwVIdwl2itEKnwq8WuHkR+DEGpRxA1Xon+tWNHvY9tnFWZf3/8jWY36W4EK5Rwqw2aELeVGvKnS4ybH7EPk7tP root@iZuf68enovvnl1qpz1bvdoZ\n```\n\n**添加SSH key到github上：**\n\nSettings - SSH and GPG keys - new SSH key\n\n<img src=\"https://raw.githubusercontent.com/SteveLinyz/image-host-for-typora/master/img/20210627022915.png\" alt=\"image-20210627022915182\" style=\"zoom:80%;\" />\n\n**连接测试：**\n\n```bash\n[root@iZuf68enovvnl1qpz1bvdoZ ~]# ssh -T git@github.com\nThe authenticity of host 'github.com (13.250.177.223)' can't be established.\nRSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.\nRSA key fingerprint is MD5:16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added 'github.com,13.250.177.223' (RSA) to the list of known hosts.\nHi SteveLinyz! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n这样就连接成功了。\n\n**设置账号信息：**\n\n```bahs\n[root@iZuf68enovvnl1qpz1bvdoZ /]# cd app/software/hexo\n[root@iZuf68enovvnl1qpz1bvdoZ hexo]# git config --global user.name \"SteveLinyz\"\n[root@iZuf68enovvnl1qpz1bvdoZ hexo]# git config --global user.email \"1143771616@qq.com\"\n```\n\n这里的用户名和邮箱，应该和Github上的账户邮箱保持一致，防止之后同步的不一致。\n\n### 5.4 Hexo部署到Github Pages\n\n#### 5.4.1 _config.yml 配置修改\n\n```bash\n[root@iZuf68enovvnl1qpz1bvdoZ hexo]# vim _config.yml\n………………\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html  # 修改或添加如下信息\ndeploy:\n  type: git\n  repo: git@github.com:SteveLinyz/stevelinyz.github.io.git\n  branch: main\n```\n\n注意，github改版后默认分支都为main。\n\n#### 5.4.2 安装扩展\n\n部署到GitHub之前，还需要安装如下扩展：\n\n```bash\n[root@iZuf68enovvnl1qpz1bvdoZ hexo]# npm install hexo-deployer-git --save\n```\n\n#### 5.4.3 部署到Github\n\n```bahs\n[root@iZuf68enovvnl1qpz1bvdoZ hexo]# hexo d -g \n# 部署前，先生成静态文件  -g 可选\n[root@iZuf68enovvnl1qpz1bvdoZ hexo]# hexo s\n```\n\n启动服务之后即可在GitHub page中看到更新文章。\n","slug":"first-blog","published":1,"updated":"2021-07-02T08:16:11.558Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqtag2un0002mkvnhymibksa","content":"<h2 id=\"1-安装Git\"><a href=\"#1-安装Git\" class=\"headerlink\" title=\"1.  安装Git\"></a>1.  安装Git</h2><blockquote>\n<p>[root@ ~]# yum install -y git  </p>\n</blockquote>\n<h2 id=\"2-安装node-js\"><a href=\"#2-安装node-js\" class=\"headerlink\" title=\"2.  安装node.js\"></a>2.  安装node.js</h2><p>进入官网：<a href=\"http://nodejs.cn/download/\">http://nodejs.cn/download/</a> </p>\n<p>注意：一定要下载<strong>最新版</strong></p>\n<h3 id=\"2-1-二进制包下载：\"><a href=\"#2-1-二进制包下载：\" class=\"headerlink\" title=\"2.1 二进制包下载：\"></a>2.1 二进制包下载：</h3><blockquote>\n<p>[root@iZuf68enovvnl1qpz1bvdoZ software]# pwd<br>/app/software</p>\n<p>[root@steve]# wget <a href=\"https://npm.taobao.org/mirrors/node/v16.4.0/node-v16.4.0-linux-x64.tar.xz\">https://npm.taobao.org/mirrors/node/v16.4.0/node-v16.4.0-linux-x64.tar.xz</a></p>\n</blockquote>\n<h3 id=\"2-2-下载到software目录后解压：\"><a href=\"#2-2-下载到software目录后解压：\" class=\"headerlink\" title=\"2.2 下载到software目录后解压：\"></a>2.2 下载到software目录后解压：</h3><blockquote>\n<p>[root@iZuf68enovvnl1qpz1bvdoZ software]# tar xf node-v16.4.0-linux-x64.tar.xz </p>\n</blockquote>\n<h3 id=\"2-3-添加node的环境变量，在最后一行加入PATH\"><a href=\"#2-3-添加node的环境变量，在最后一行加入PATH\" class=\"headerlink\" title=\"2.3 添加node的环境变量，在最后一行加入PATH\"></a>2.3 添加node的环境变量，在最后一行加入PATH</h3><blockquote>\n<p>vi /etc/profile #最后一行加入PATH </p>\n<p>export PATH=$PATH:/home/www/node-v16.4.0-linux-x64/bin</p>\n</blockquote>\n<h3 id=\"2-4-使-etc-profile里的配置立即生效\"><a href=\"#2-4-使-etc-profile里的配置立即生效\" class=\"headerlink\" title=\"2.4 使/etc/profile里的配置立即生效\"></a>2.4 使/etc/profile里的配置立即生效</h3><blockquote>\n<p>source /etc/profile</p>\n</blockquote>\n<h3 id=\"2-5-查看版本信息\"><a href=\"#2-5-查看版本信息\" class=\"headerlink\" title=\"2.5 查看版本信息\"></a>2.5 查看版本信息</h3><blockquote>\n<p>[root@iZuf68enovvnl1qpz1bvdoZ bin]# ./node -v<br>v16.4.0</p>\n</blockquote>\n<h3 id=\"2-6-创建软连接\"><a href=\"#2-6-创建软连接\" class=\"headerlink\" title=\"2.6 创建软连接\"></a>2.6 创建软连接</h3><blockquote>\n<p>[root@uf68enovvnl1qpz1bvdoZ bin]# ln -s /app/software/node-v16.4.0-linux-x64/bin/node /usr/local/bin/node<br>[root@uf68enovvnl1qpz1bvdoZ bin]# ln -s /app/software/node-v16.4.0-linux-x64/bin/npm /usr/local/bin/npm</p>\n</blockquote>\n<p>使node 和 npm可以使用。</p>\n<h2 id=\"3-hexo部署\"><a href=\"#3-hexo部署\" class=\"headerlink\" title=\"3.  hexo部署\"></a>3.  hexo部署</h2><h3 id=\"3-1-安装hexo\"><a href=\"#3-1-安装hexo\" class=\"headerlink\" title=\"3.1 安装hexo\"></a>3.1 安装hexo</h3><blockquote>\n<p>[root@iZuf68enovvnl1qpz1bvdoZ bin]# npm install hexo-cli -g</p>\n</blockquote>\n<h3 id=\"3-2-将-hexo-命令添加到全局，采用软连接方式\"><a href=\"#3-2-将-hexo-命令添加到全局，采用软连接方式\" class=\"headerlink\" title=\"3.2 将 hexo 命令添加到全局，采用软连接方式\"></a>3.2 将 hexo 命令添加到全局，采用软连接方式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ bin]<span class=\"comment\"># ln -s /app/software/node-v16.4.0-linux-x64/lib/node_modules/hexo-cli/bin/hexo /usr/local/bin/hexo</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-init-hexo\"><a href=\"#3-3-init-hexo\" class=\"headerlink\" title=\"3.3 init hexo\"></a>3.3 init hexo</h3><p>创建一个hexo目录，并初始化。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ software]<span class=\"comment\"># mkdir hexo</span></span><br><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ software]<span class=\"comment\"># cd hexo</span></span><br><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ hexo]<span class=\"comment\"># hexo init</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-启动测试环境\"><a href=\"#3-4-启动测试环境\" class=\"headerlink\" title=\"3.4 启动测试环境\"></a>3.4 启动测试环境</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ hexo]<span class=\"comment\"># hexo g</span></span><br><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ hexo]<span class=\"comment\"># hexo s</span></span><br><span class=\"line\">NFO  Validating config</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-5-遗留问题\"><a href=\"#3-5-遗留问题\" class=\"headerlink\" title=\"3.5 遗留问题\"></a>3.5 遗留问题</h3><p>启动后显示Hexo运行在<a href=\"http://localhost:4000中，但Windows下无法访问。\">http://localhost:4000中，但Windows下无法访问。</a></p>\n<h2 id=\"4-新建一篇博客\"><a href=\"#4-新建一篇博客\" class=\"headerlink\" title=\"4. 新建一篇博客\"></a>4. 新建一篇博客</h2><h2 id=\"5-部署到github\"><a href=\"#5-部署到github\" class=\"headerlink\" title=\"5. 部署到github\"></a>5. 部署到github</h2><h3 id=\"5-1-new一个仓库\"><a href=\"#5-1-new一个仓库\" class=\"headerlink\" title=\"5.1 new一个仓库\"></a>5.1 new一个仓库</h3><img src=\"https://raw.githubusercontent.com/SteveLinyz/image-host-for-typora/master/img/20210627022222.png\" alt=\"image-20210627022222438\" style=\"zoom:80%;\" />\n\n<p>两个名字需要一样，注意结尾名称。</p>\n<h3 id=\"5-2-开启Github-pages\"><a href=\"#5-2-开启Github-pages\" class=\"headerlink\" title=\"5.2 开启Github pages\"></a>5.2 开启Github pages</h3><p>进入仓库 - settings - page ，已默认开启Github pages，选择一个主题，即可访问</p>\n<blockquote>\n<p>SteveLinyz.github.io</p>\n</blockquote>\n<h3 id=\"5-3-在github上部署SSH-keys信息\"><a href=\"#5-3-在github上部署SSH-keys信息\" class=\"headerlink\" title=\"5.3 在github上部署SSH keys信息\"></a>5.3 在github上部署SSH keys信息</h3><p>为了能将个人博客服务器上的博客数据推送到 GitHub，达到数据永久保存效果，我们需要把博客服务器的 SSH keys 信息在 GitHub 上添加信任。</p>\n<p><strong>首先，我们要在本地服务器上创建SSH-key信息:输入命令后一直回车。</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ /]<span class=\"comment\"># ssh-keygen -t rsassh-keygen -t rsa</span></span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key (/root/.ssh/id_rsa): </span><br><span class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase): </span><br><span class=\"line\">Enter same passphrase again: </span><br><span class=\"line\">Your identification has been saved <span class=\"keyword\">in</span> /root/.ssh/id_rsa.</span><br><span class=\"line\">Your public key has been saved <span class=\"keyword\">in</span> /root/.ssh/id_rsa.pub.</span><br><span class=\"line\">The key fingerprint is:</span><br><span class=\"line\">SHA256:4SzlGFviy1NdMzshsnW9z7WXntRSEJe5k3Ipyd3Ycgk root@iZuf68enovvnl1qpz1bvdoZ</span><br><span class=\"line\">The key<span class=\"string\">&#x27;s randomart image is:</span></span><br><span class=\"line\"><span class=\"string\">+---[RSA 2048]----+</span></span><br><span class=\"line\"><span class=\"string\">|              . +|</span></span><br><span class=\"line\"><span class=\"string\">|             E = |</span></span><br><span class=\"line\"><span class=\"string\">|      o = o K *o*|</span></span><br><span class=\"line\"><span class=\"string\">|     . @ * + Xo@+|</span></span><br><span class=\"line\"><span class=\"string\">|      = S . o =o+|</span></span><br><span class=\"line\"><span class=\"string\">|      . +    . +=|</span></span><br><span class=\"line\"><span class=\"string\">|      +       .+=|</span></span><br><span class=\"line\"><span class=\"string\">|       .      o.o|</span></span><br><span class=\"line\"><span class=\"string\">|               o |</span></span><br><span class=\"line\"><span class=\"string\">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>之后查看SSH：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ ~]<span class=\"comment\"># cd .ssh/</span></span><br><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ .ssh]<span class=\"comment\"># cat id_rsa.pub</span></span><br><span class=\"line\">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCWK+X3w3ODYagL6FyhNREZWcWZY/3Y709GKYXVFZrXTsJx/zDVOtKKQW97WIX8Nw4/36jo6AY9jWKWwEyjiuTBQILmq9imowBHETVS5ETqbZlINY2oUmyfY9IVlBAJ/paERzS8kik/8Fi5RralQddAQV9k3/L/tTHY1CPxS+W6zFksfH2kgvpDGZBK5PvCjKHxFaYnN5wBjfGt5HIbVoeSLlg8XMNCbwPBEPweDUWsAncfA4cJ+1doNdah0jcQM3LwVIdwl2itEKnwq8WuHkR+DEGpRxA1Xon+tWNHvY9tnFWZf3/8jWY36W4EK5Rwqw2aELeVGvKnS4ybH7EPk7tP root@iZuf68enovvnl1qpz1bvdoZ</span><br></pre></td></tr></table></figure>\n\n<p><strong>添加SSH key到github上：</strong></p>\n<p>Settings - SSH and GPG keys - new SSH key</p>\n<img src=\"https://raw.githubusercontent.com/SteveLinyz/image-host-for-typora/master/img/20210627022915.png\" alt=\"image-20210627022915182\" style=\"zoom:80%;\" />\n\n<p><strong>连接测试：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ ~]<span class=\"comment\"># ssh -T git@github.com</span></span><br><span class=\"line\">The authenticity of host <span class=\"string\">&#x27;github.com (13.250.177.223)&#x27;</span> can<span class=\"string\">&#x27;t be established.</span></span><br><span class=\"line\"><span class=\"string\">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</span></span><br><span class=\"line\"><span class=\"string\">RSA key fingerprint is MD5:16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span></span><br><span class=\"line\"><span class=\"string\">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class=\"line\"><span class=\"string\">Warning: Permanently added &#x27;</span>github.com,13.250.177.223<span class=\"string\">&#x27; (RSA) to the list of known hosts.</span></span><br><span class=\"line\"><span class=\"string\">Hi SteveLinyz! You&#x27;</span>ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>\n\n<p>这样就连接成功了。</p>\n<p><strong>设置账号信息：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ /]# cd app/software/hexo</span><br><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ hexo]# git config --global user.name &quot;SteveLinyz&quot;</span><br><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ hexo]# git config --global user.email &quot;1143771616@qq.com&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这里的用户名和邮箱，应该和Github上的账户邮箱保持一致，防止之后同步的不一致。</p>\n<h3 id=\"5-4-Hexo部署到Github-Pages\"><a href=\"#5-4-Hexo部署到Github-Pages\" class=\"headerlink\" title=\"5.4 Hexo部署到Github Pages\"></a>5.4 Hexo部署到Github Pages</h3><h4 id=\"5-4-1-config-yml-配置修改\"><a href=\"#5-4-1-config-yml-配置修改\" class=\"headerlink\" title=\"5.4.1 _config.yml 配置修改\"></a>5.4.1 _config.yml 配置修改</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ hexo]<span class=\"comment\"># vim _config.yml</span></span><br><span class=\"line\">………………</span><br><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html  # 修改或添加如下信息</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: git@github.com:SteveLinyz/stevelinyz.github.io.git</span><br><span class=\"line\">  branch: main</span><br></pre></td></tr></table></figure>\n\n<p>注意，github改版后默认分支都为main。</p>\n<h4 id=\"5-4-2-安装扩展\"><a href=\"#5-4-2-安装扩展\" class=\"headerlink\" title=\"5.4.2 安装扩展\"></a>5.4.2 安装扩展</h4><p>部署到GitHub之前，还需要安装如下扩展：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ hexo]<span class=\"comment\"># npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-4-3-部署到Github\"><a href=\"#5-4-3-部署到Github\" class=\"headerlink\" title=\"5.4.3 部署到Github\"></a>5.4.3 部署到Github</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ hexo]# hexo d -g </span><br><span class=\"line\"># 部署前，先生成静态文件  -g 可选</span><br><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ hexo]# hexo s</span><br></pre></td></tr></table></figure>\n\n<p>启动服务之后即可在GitHub page中看到更新文章。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-安装Git\"><a href=\"#1-安装Git\" class=\"headerlink\" title=\"1.  安装Git\"></a>1.  安装Git</h2><blockquote>\n<p>[root@ ~]# yum install -y git  </p>\n</blockquote>\n<h2 id=\"2-安装node-js\"><a href=\"#2-安装node-js\" class=\"headerlink\" title=\"2.  安装node.js\"></a>2.  安装node.js</h2><p>进入官网：<a href=\"http://nodejs.cn/download/\">http://nodejs.cn/download/</a> </p>\n<p>注意：一定要下载<strong>最新版</strong></p>\n<h3 id=\"2-1-二进制包下载：\"><a href=\"#2-1-二进制包下载：\" class=\"headerlink\" title=\"2.1 二进制包下载：\"></a>2.1 二进制包下载：</h3><blockquote>\n<p>[root@iZuf68enovvnl1qpz1bvdoZ software]# pwd<br>/app/software</p>\n<p>[root@steve]# wget <a href=\"https://npm.taobao.org/mirrors/node/v16.4.0/node-v16.4.0-linux-x64.tar.xz\">https://npm.taobao.org/mirrors/node/v16.4.0/node-v16.4.0-linux-x64.tar.xz</a></p>\n</blockquote>\n<h3 id=\"2-2-下载到software目录后解压：\"><a href=\"#2-2-下载到software目录后解压：\" class=\"headerlink\" title=\"2.2 下载到software目录后解压：\"></a>2.2 下载到software目录后解压：</h3><blockquote>\n<p>[root@iZuf68enovvnl1qpz1bvdoZ software]# tar xf node-v16.4.0-linux-x64.tar.xz </p>\n</blockquote>\n<h3 id=\"2-3-添加node的环境变量，在最后一行加入PATH\"><a href=\"#2-3-添加node的环境变量，在最后一行加入PATH\" class=\"headerlink\" title=\"2.3 添加node的环境变量，在最后一行加入PATH\"></a>2.3 添加node的环境变量，在最后一行加入PATH</h3><blockquote>\n<p>vi /etc/profile #最后一行加入PATH </p>\n<p>export PATH=$PATH:/home/www/node-v16.4.0-linux-x64/bin</p>\n</blockquote>\n<h3 id=\"2-4-使-etc-profile里的配置立即生效\"><a href=\"#2-4-使-etc-profile里的配置立即生效\" class=\"headerlink\" title=\"2.4 使/etc/profile里的配置立即生效\"></a>2.4 使/etc/profile里的配置立即生效</h3><blockquote>\n<p>source /etc/profile</p>\n</blockquote>\n<h3 id=\"2-5-查看版本信息\"><a href=\"#2-5-查看版本信息\" class=\"headerlink\" title=\"2.5 查看版本信息\"></a>2.5 查看版本信息</h3><blockquote>\n<p>[root@iZuf68enovvnl1qpz1bvdoZ bin]# ./node -v<br>v16.4.0</p>\n</blockquote>\n<h3 id=\"2-6-创建软连接\"><a href=\"#2-6-创建软连接\" class=\"headerlink\" title=\"2.6 创建软连接\"></a>2.6 创建软连接</h3><blockquote>\n<p>[root@uf68enovvnl1qpz1bvdoZ bin]# ln -s /app/software/node-v16.4.0-linux-x64/bin/node /usr/local/bin/node<br>[root@uf68enovvnl1qpz1bvdoZ bin]# ln -s /app/software/node-v16.4.0-linux-x64/bin/npm /usr/local/bin/npm</p>\n</blockquote>\n<p>使node 和 npm可以使用。</p>\n<h2 id=\"3-hexo部署\"><a href=\"#3-hexo部署\" class=\"headerlink\" title=\"3.  hexo部署\"></a>3.  hexo部署</h2><h3 id=\"3-1-安装hexo\"><a href=\"#3-1-安装hexo\" class=\"headerlink\" title=\"3.1 安装hexo\"></a>3.1 安装hexo</h3><blockquote>\n<p>[root@iZuf68enovvnl1qpz1bvdoZ bin]# npm install hexo-cli -g</p>\n</blockquote>\n<h3 id=\"3-2-将-hexo-命令添加到全局，采用软连接方式\"><a href=\"#3-2-将-hexo-命令添加到全局，采用软连接方式\" class=\"headerlink\" title=\"3.2 将 hexo 命令添加到全局，采用软连接方式\"></a>3.2 将 hexo 命令添加到全局，采用软连接方式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ bin]<span class=\"comment\"># ln -s /app/software/node-v16.4.0-linux-x64/lib/node_modules/hexo-cli/bin/hexo /usr/local/bin/hexo</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-init-hexo\"><a href=\"#3-3-init-hexo\" class=\"headerlink\" title=\"3.3 init hexo\"></a>3.3 init hexo</h3><p>创建一个hexo目录，并初始化。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ software]<span class=\"comment\"># mkdir hexo</span></span><br><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ software]<span class=\"comment\"># cd hexo</span></span><br><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ hexo]<span class=\"comment\"># hexo init</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-启动测试环境\"><a href=\"#3-4-启动测试环境\" class=\"headerlink\" title=\"3.4 启动测试环境\"></a>3.4 启动测试环境</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ hexo]<span class=\"comment\"># hexo g</span></span><br><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ hexo]<span class=\"comment\"># hexo s</span></span><br><span class=\"line\">NFO  Validating config</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-5-遗留问题\"><a href=\"#3-5-遗留问题\" class=\"headerlink\" title=\"3.5 遗留问题\"></a>3.5 遗留问题</h3><p>启动后显示Hexo运行在<a href=\"http://localhost:4000中，但Windows下无法访问。\">http://localhost:4000中，但Windows下无法访问。</a></p>\n<h2 id=\"4-新建一篇博客\"><a href=\"#4-新建一篇博客\" class=\"headerlink\" title=\"4. 新建一篇博客\"></a>4. 新建一篇博客</h2><h2 id=\"5-部署到github\"><a href=\"#5-部署到github\" class=\"headerlink\" title=\"5. 部署到github\"></a>5. 部署到github</h2><h3 id=\"5-1-new一个仓库\"><a href=\"#5-1-new一个仓库\" class=\"headerlink\" title=\"5.1 new一个仓库\"></a>5.1 new一个仓库</h3><img src=\"https://raw.githubusercontent.com/SteveLinyz/image-host-for-typora/master/img/20210627022222.png\" alt=\"image-20210627022222438\" style=\"zoom:80%;\" />\n\n<p>两个名字需要一样，注意结尾名称。</p>\n<h3 id=\"5-2-开启Github-pages\"><a href=\"#5-2-开启Github-pages\" class=\"headerlink\" title=\"5.2 开启Github pages\"></a>5.2 开启Github pages</h3><p>进入仓库 - settings - page ，已默认开启Github pages，选择一个主题，即可访问</p>\n<blockquote>\n<p>SteveLinyz.github.io</p>\n</blockquote>\n<h3 id=\"5-3-在github上部署SSH-keys信息\"><a href=\"#5-3-在github上部署SSH-keys信息\" class=\"headerlink\" title=\"5.3 在github上部署SSH keys信息\"></a>5.3 在github上部署SSH keys信息</h3><p>为了能将个人博客服务器上的博客数据推送到 GitHub，达到数据永久保存效果，我们需要把博客服务器的 SSH keys 信息在 GitHub 上添加信任。</p>\n<p><strong>首先，我们要在本地服务器上创建SSH-key信息:输入命令后一直回车。</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ /]<span class=\"comment\"># ssh-keygen -t rsassh-keygen -t rsa</span></span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key (/root/.ssh/id_rsa): </span><br><span class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase): </span><br><span class=\"line\">Enter same passphrase again: </span><br><span class=\"line\">Your identification has been saved <span class=\"keyword\">in</span> /root/.ssh/id_rsa.</span><br><span class=\"line\">Your public key has been saved <span class=\"keyword\">in</span> /root/.ssh/id_rsa.pub.</span><br><span class=\"line\">The key fingerprint is:</span><br><span class=\"line\">SHA256:4SzlGFviy1NdMzshsnW9z7WXntRSEJe5k3Ipyd3Ycgk root@iZuf68enovvnl1qpz1bvdoZ</span><br><span class=\"line\">The key<span class=\"string\">&#x27;s randomart image is:</span></span><br><span class=\"line\"><span class=\"string\">+---[RSA 2048]----+</span></span><br><span class=\"line\"><span class=\"string\">|              . +|</span></span><br><span class=\"line\"><span class=\"string\">|             E = |</span></span><br><span class=\"line\"><span class=\"string\">|      o = o K *o*|</span></span><br><span class=\"line\"><span class=\"string\">|     . @ * + Xo@+|</span></span><br><span class=\"line\"><span class=\"string\">|      = S . o =o+|</span></span><br><span class=\"line\"><span class=\"string\">|      . +    . +=|</span></span><br><span class=\"line\"><span class=\"string\">|      +       .+=|</span></span><br><span class=\"line\"><span class=\"string\">|       .      o.o|</span></span><br><span class=\"line\"><span class=\"string\">|               o |</span></span><br><span class=\"line\"><span class=\"string\">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>之后查看SSH：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ ~]<span class=\"comment\"># cd .ssh/</span></span><br><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ .ssh]<span class=\"comment\"># cat id_rsa.pub</span></span><br><span class=\"line\">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCWK+X3w3ODYagL6FyhNREZWcWZY/3Y709GKYXVFZrXTsJx/zDVOtKKQW97WIX8Nw4/36jo6AY9jWKWwEyjiuTBQILmq9imowBHETVS5ETqbZlINY2oUmyfY9IVlBAJ/paERzS8kik/8Fi5RralQddAQV9k3/L/tTHY1CPxS+W6zFksfH2kgvpDGZBK5PvCjKHxFaYnN5wBjfGt5HIbVoeSLlg8XMNCbwPBEPweDUWsAncfA4cJ+1doNdah0jcQM3LwVIdwl2itEKnwq8WuHkR+DEGpRxA1Xon+tWNHvY9tnFWZf3/8jWY36W4EK5Rwqw2aELeVGvKnS4ybH7EPk7tP root@iZuf68enovvnl1qpz1bvdoZ</span><br></pre></td></tr></table></figure>\n\n<p><strong>添加SSH key到github上：</strong></p>\n<p>Settings - SSH and GPG keys - new SSH key</p>\n<img src=\"https://raw.githubusercontent.com/SteveLinyz/image-host-for-typora/master/img/20210627022915.png\" alt=\"image-20210627022915182\" style=\"zoom:80%;\" />\n\n<p><strong>连接测试：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ ~]<span class=\"comment\"># ssh -T git@github.com</span></span><br><span class=\"line\">The authenticity of host <span class=\"string\">&#x27;github.com (13.250.177.223)&#x27;</span> can<span class=\"string\">&#x27;t be established.</span></span><br><span class=\"line\"><span class=\"string\">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</span></span><br><span class=\"line\"><span class=\"string\">RSA key fingerprint is MD5:16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span></span><br><span class=\"line\"><span class=\"string\">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class=\"line\"><span class=\"string\">Warning: Permanently added &#x27;</span>github.com,13.250.177.223<span class=\"string\">&#x27; (RSA) to the list of known hosts.</span></span><br><span class=\"line\"><span class=\"string\">Hi SteveLinyz! You&#x27;</span>ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>\n\n<p>这样就连接成功了。</p>\n<p><strong>设置账号信息：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ /]# cd app/software/hexo</span><br><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ hexo]# git config --global user.name &quot;SteveLinyz&quot;</span><br><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ hexo]# git config --global user.email &quot;1143771616@qq.com&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这里的用户名和邮箱，应该和Github上的账户邮箱保持一致，防止之后同步的不一致。</p>\n<h3 id=\"5-4-Hexo部署到Github-Pages\"><a href=\"#5-4-Hexo部署到Github-Pages\" class=\"headerlink\" title=\"5.4 Hexo部署到Github Pages\"></a>5.4 Hexo部署到Github Pages</h3><h4 id=\"5-4-1-config-yml-配置修改\"><a href=\"#5-4-1-config-yml-配置修改\" class=\"headerlink\" title=\"5.4.1 _config.yml 配置修改\"></a>5.4.1 _config.yml 配置修改</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ hexo]<span class=\"comment\"># vim _config.yml</span></span><br><span class=\"line\">………………</span><br><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html  # 修改或添加如下信息</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: git@github.com:SteveLinyz/stevelinyz.github.io.git</span><br><span class=\"line\">  branch: main</span><br></pre></td></tr></table></figure>\n\n<p>注意，github改版后默认分支都为main。</p>\n<h4 id=\"5-4-2-安装扩展\"><a href=\"#5-4-2-安装扩展\" class=\"headerlink\" title=\"5.4.2 安装扩展\"></a>5.4.2 安装扩展</h4><p>部署到GitHub之前，还需要安装如下扩展：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ hexo]<span class=\"comment\"># npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-4-3-部署到Github\"><a href=\"#5-4-3-部署到Github\" class=\"headerlink\" title=\"5.4.3 部署到Github\"></a>5.4.3 部署到Github</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ hexo]# hexo d -g </span><br><span class=\"line\"># 部署前，先生成静态文件  -g 可选</span><br><span class=\"line\">[root@iZuf68enovvnl1qpz1bvdoZ hexo]# hexo s</span><br></pre></td></tr></table></figure>\n\n<p>启动服务之后即可在GitHub page中看到更新文章。</p>\n"},{"title":"Java容器","date":"2021-07-06T16:00:00.000Z","cover":"https://images.pexels.com/photos/167699/pexels-photo-167699.jpeg?auto=compress&cs=tinysrgb&dpr=2&w=500","copyright_author":"SteveLin","toc_number":false,"_content":"# 1. 概览\n\n容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对（两个对象）的映射表。\n\n## 1.1 **Collection**\n\n![image-20210706192140377](https://gitee.com/steve-lin08/image-host/raw/master/20210706192147.png)\n\n### 1. Set\n\n- TreeSet：基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet，HashSet 查找的时间复杂度为 O(1)，TreeSet 则为 O(logN)。\n- HashSet：基于哈希表实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。\n- LinkedHashSet：具有 HashSet 的查找效率，并且内部使用双向链表维护元素的插入顺序。\n\n### 2. List\n\n- ArrayList：基于动态数组实现，支持随机访问。\n- Vector：和 ArrayList 类似，但它是线程安全的。\n- LinkedList：基于双向链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用作栈、队列和双向队列。\n\n### 3. Queue\n\n- LinkedList：可以用它来实现双向队列。\n- PriorityQueue：基于堆结构实现，可以用它来实现优先队列。\n\n## 1.2 Map\n\n![Map](https://gitee.com/steve-lin08/image-host/raw/master/20210706192429.png)\n\n- TreeMap：基于红黑树实现。\n- HashMap：基于哈希表实现。\n- HashTable：和 HashMap 类似，但它是线程安全的，这意味着同一时刻多个线程同时写入 HashTable 不会导致数据不一致。它是遗留类，不应该去使用它，而是使用 ConcurrentHashMap 来支持线程安全，ConcurrentHashMap 的效率会更高，因为 ConcurrentHashMap 引入了分段锁。\n- LinkedHashMap：使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用（LRU）顺序。\n\n# 2. Collection\n\n## 2.1 Collection常用方法\n\n```java\nboolean add(Object o)//添加对象到集合\nboolean remove(Object o)//删除指定的对象\nint size()//返回当前集合中元素的数量\nboolean contains(Object o)//查找集合中是否有指定的对象\nboolean isEmpty()//判断集合是否为空\nIterator iterator()//返回一个迭代器\nboolean containsAll(Collection c)//查找集合中是否有集合c中的元素\nboolean addAll(Collection c)//将集合c中所有的元素添加给该集合\nvoid clear()//删除集合中所有元素\nvoid removeAll(Collection c)//从集合中删除c集合中也有的元素\nvoid retainAll(Collection c)//从集合中删除集合c中不包含的元素\n```\n\n## 2.2 ArrayList\n\n**ArrayList可以顺序存放重复的元素，速度快，但是线程不安全。**\n\n因为 ArrayList 是基于数组实现的，所以支持快速随机访问。RandomAccess 接口标识着该类支持快速随机访问。\n\n```java\npublic class ArrayList<E> extends AbstractList<E>\n        implements List<E>, RandomAccess, Cloneable, java.io.Serializable\n```\n\n数组的默认大小为 10。\n\n```java\nprivate static final int DEFAULT_CAPACITY = 10;\n```\n\n### 2.2.1 扩容\n\n添加元素时使用 ensureCapacityInternal() 方法来保证容量足够，如果不够时，需要使用 grow() 方法进行扩容，新容量的大小为 `oldCapacity + (oldCapacity >> 1)`，即 oldCapacity+oldCapacity/2。其中 oldCapacity >> 1 需要取整，所以新容量大约是旧容量的 1.5 倍左右。（oldCapacity 为偶数就是 1.5 倍，为奇数就是 1.5 倍-0.5）\n\n扩容操作需要调用 `Arrays.copyOf()` 把原数组整个复制到新数组中，这个操作代价很高，因此最好在创建 ArrayList 对象时就指定大概的容量大小，减少扩容操作的次数。\n\n### 2.2.2 删除元素\n\n需要调用 System.arraycopy() 将 index+1 后面的元素都复制到 index 位置上，该操作的时间复杂度为 O(N)，可以看到 ArrayList 删除元素的代价是非常高的。\n\n```java\npublic E remove(int index) {\n    rangeCheck(index);\n    modCount++;\n    E oldValue = elementData(index);\n    int numMoved = size - index - 1;\n    if (numMoved > 0)\n        System.arraycopy(elementData, index+1, elementData, index, numMoved);\n    elementData[--size] = null; // clear to let GC do its work\n    return oldValue;\n}\n```\n\n## 2.3 LinkedList\n\n基于双向链表实现，使用 Node 存储链表节点信息。\n\n```java\nprivate static class Node<E> {\n    E item;\n    Node<E> next;\n    Node<E> prev;\n}\n```\n\n每个链表存储了 first 和 last 指针：\n\n```java\ntransient Node<E> first;\ntransient Node<E> last;\n```\n\n![image-20210706193430344](https://gitee.com/steve-lin08/image-host/raw/master/20210706193430.png)\n\n### 2.3.1 与ArrayList的比较\n\nArrayList 基于动态数组实现，LinkedList 基于双向链表实现。ArrayList 和 LinkedList 的区别可以归结为数组和链表的区别：\n\n- 数组支持随机访问，但插入删除的代价很高，需要移动大量元素；\n- 链表不支持随机访问，但插入删除只需要改变指针。\n\n## 2.4 Vector\n\n### 2.4.1 同步\n\n它的实现与 ArrayList 类似，但是使用了 synchronized 进行同步。\n\n```java\npublic synchronized boolean add(E e) {\n    modCount++;\n    ensureCapacityHelper(elementCount + 1);\n    elementData[elementCount++] = e;\n    return true;\n}\n\npublic synchronized E get(int index) {\n    if (index >= elementCount)\n        throw new ArrayIndexOutOfBoundsException(index);\n\n    return elementData(index);\n}\n```\n\n### 2.4.2 扩容\n\nVector 的构造函数可以传入 capacityIncrement 参数，它的作用是在扩容时使容量 capacity 增长 capacityIncrement。如果这个参数的值小于等于 0，扩容时每次都令 capacity 为原来的两倍。\n\n### 2.4.3 与 ArrayList 的比较\n\n- Vector 是同步的，因此开销就比 ArrayList 要大，访问速度更慢。最好使用 ArrayList 而不是 Vector，因为同步操作完全可以由程序员自己来控制；\n- Vector 每次扩容请求其大小的 2 倍（也可以通过构造函数设置增长的容量），而 ArrayList 是 1.5 倍。\n\n## 2.5 HashSet\n\nSet集的元素可以**无序**但是**不可以重复**\n\n- HashSet是Set的一个重要实现类，称为哈希集\n- HashSet中是允许存在一个null元素的\n- 具有良好的存取和查找性能\n\nHashSet按Hash算法来存储集合中的元素，因此具有很好的存取和查找性能。底层数据结构是**哈希表**。\n\n### 2.5.1 内部存储机制\n\n当向HashSet集合中存入一个元素时:\n\n1. HashSet会调用该对象的**hashCode()**方法来得到该对象的hashCode值。\n\n2. 根据该hashCode值决定该对象在HashSet中的存储位置(下标)。\n\n3. 如果该位置已经存放了元素，则用**equals()**来判断两个元素是否相等。\n\n   如果相等，则覆盖。\n\n   如果不等，则用指针将两元素链接在一起。\n\nHashCode表用每个元素的hashCode值来计算其存储位置，从而可以自由增加HashCode的长度，并根据元素的hashCode值来访问元素。而不用一个个遍历索引去访问，**这就是它比数组快的原因**。\n\n### 2.5.2 重写hashCode()和equals()\n\n对于一个类，如果没有重写过hashCode()和equals()，则无法判断其对象的属性是否一致。\n\n```java\n @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        User user = (User) o;\n        return Objects.equals(name, user.name);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(name);\n    }\n```\n\n## 2.6 LinkedHashSet\n\nHashSet还有一个子类LinkedList、LinkedHashSet集合也是根据元素的hashCode值来决定元素的存储位置，但它同时使用链表维护元素的次序，这样使得元素看起来是以插入的顺序保存的，也就是说当遍历集合LinkedHashSet集合里的元素时，**集合将会按元素的添加顺序来访问集合里的元素**。\n输出集合里的元素时，元素顺序总是与添加顺序一致。**但是LinkedHashSet依然是HashSet，因此它不允许集合重复。**\n\n## 2.7 TreeSet\n\nTreeSet是SortedSet接口的实现类，TreeSet可以确保集合元素处于排序状态。\n\n### 2.7.1 内部存储机制\n\nTreeSet内部实现的是**红黑树**，默认整形排序为从小到大。\n\nTreeSet中的元素支持2种排序方式：**自然排序** 或者 **根据创建TreeSet 时提供的 Comparator 进行排序**。这取决于使用的构造方法。\n\n","source":"_posts/容器.md","raw":"---\ntitle: Java容器\ndate: 2021.7.7\ntags:\n    - Java\ncover: https://images.pexels.com/photos/167699/pexels-photo-167699.jpeg?auto=compress&cs=tinysrgb&dpr=2&w=500\ncopyright_author: SteveLin\ntoc_number: false\n\n---\n# 1. 概览\n\n容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对（两个对象）的映射表。\n\n## 1.1 **Collection**\n\n![image-20210706192140377](https://gitee.com/steve-lin08/image-host/raw/master/20210706192147.png)\n\n### 1. Set\n\n- TreeSet：基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet，HashSet 查找的时间复杂度为 O(1)，TreeSet 则为 O(logN)。\n- HashSet：基于哈希表实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。\n- LinkedHashSet：具有 HashSet 的查找效率，并且内部使用双向链表维护元素的插入顺序。\n\n### 2. List\n\n- ArrayList：基于动态数组实现，支持随机访问。\n- Vector：和 ArrayList 类似，但它是线程安全的。\n- LinkedList：基于双向链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用作栈、队列和双向队列。\n\n### 3. Queue\n\n- LinkedList：可以用它来实现双向队列。\n- PriorityQueue：基于堆结构实现，可以用它来实现优先队列。\n\n## 1.2 Map\n\n![Map](https://gitee.com/steve-lin08/image-host/raw/master/20210706192429.png)\n\n- TreeMap：基于红黑树实现。\n- HashMap：基于哈希表实现。\n- HashTable：和 HashMap 类似，但它是线程安全的，这意味着同一时刻多个线程同时写入 HashTable 不会导致数据不一致。它是遗留类，不应该去使用它，而是使用 ConcurrentHashMap 来支持线程安全，ConcurrentHashMap 的效率会更高，因为 ConcurrentHashMap 引入了分段锁。\n- LinkedHashMap：使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用（LRU）顺序。\n\n# 2. Collection\n\n## 2.1 Collection常用方法\n\n```java\nboolean add(Object o)//添加对象到集合\nboolean remove(Object o)//删除指定的对象\nint size()//返回当前集合中元素的数量\nboolean contains(Object o)//查找集合中是否有指定的对象\nboolean isEmpty()//判断集合是否为空\nIterator iterator()//返回一个迭代器\nboolean containsAll(Collection c)//查找集合中是否有集合c中的元素\nboolean addAll(Collection c)//将集合c中所有的元素添加给该集合\nvoid clear()//删除集合中所有元素\nvoid removeAll(Collection c)//从集合中删除c集合中也有的元素\nvoid retainAll(Collection c)//从集合中删除集合c中不包含的元素\n```\n\n## 2.2 ArrayList\n\n**ArrayList可以顺序存放重复的元素，速度快，但是线程不安全。**\n\n因为 ArrayList 是基于数组实现的，所以支持快速随机访问。RandomAccess 接口标识着该类支持快速随机访问。\n\n```java\npublic class ArrayList<E> extends AbstractList<E>\n        implements List<E>, RandomAccess, Cloneable, java.io.Serializable\n```\n\n数组的默认大小为 10。\n\n```java\nprivate static final int DEFAULT_CAPACITY = 10;\n```\n\n### 2.2.1 扩容\n\n添加元素时使用 ensureCapacityInternal() 方法来保证容量足够，如果不够时，需要使用 grow() 方法进行扩容，新容量的大小为 `oldCapacity + (oldCapacity >> 1)`，即 oldCapacity+oldCapacity/2。其中 oldCapacity >> 1 需要取整，所以新容量大约是旧容量的 1.5 倍左右。（oldCapacity 为偶数就是 1.5 倍，为奇数就是 1.5 倍-0.5）\n\n扩容操作需要调用 `Arrays.copyOf()` 把原数组整个复制到新数组中，这个操作代价很高，因此最好在创建 ArrayList 对象时就指定大概的容量大小，减少扩容操作的次数。\n\n### 2.2.2 删除元素\n\n需要调用 System.arraycopy() 将 index+1 后面的元素都复制到 index 位置上，该操作的时间复杂度为 O(N)，可以看到 ArrayList 删除元素的代价是非常高的。\n\n```java\npublic E remove(int index) {\n    rangeCheck(index);\n    modCount++;\n    E oldValue = elementData(index);\n    int numMoved = size - index - 1;\n    if (numMoved > 0)\n        System.arraycopy(elementData, index+1, elementData, index, numMoved);\n    elementData[--size] = null; // clear to let GC do its work\n    return oldValue;\n}\n```\n\n## 2.3 LinkedList\n\n基于双向链表实现，使用 Node 存储链表节点信息。\n\n```java\nprivate static class Node<E> {\n    E item;\n    Node<E> next;\n    Node<E> prev;\n}\n```\n\n每个链表存储了 first 和 last 指针：\n\n```java\ntransient Node<E> first;\ntransient Node<E> last;\n```\n\n![image-20210706193430344](https://gitee.com/steve-lin08/image-host/raw/master/20210706193430.png)\n\n### 2.3.1 与ArrayList的比较\n\nArrayList 基于动态数组实现，LinkedList 基于双向链表实现。ArrayList 和 LinkedList 的区别可以归结为数组和链表的区别：\n\n- 数组支持随机访问，但插入删除的代价很高，需要移动大量元素；\n- 链表不支持随机访问，但插入删除只需要改变指针。\n\n## 2.4 Vector\n\n### 2.4.1 同步\n\n它的实现与 ArrayList 类似，但是使用了 synchronized 进行同步。\n\n```java\npublic synchronized boolean add(E e) {\n    modCount++;\n    ensureCapacityHelper(elementCount + 1);\n    elementData[elementCount++] = e;\n    return true;\n}\n\npublic synchronized E get(int index) {\n    if (index >= elementCount)\n        throw new ArrayIndexOutOfBoundsException(index);\n\n    return elementData(index);\n}\n```\n\n### 2.4.2 扩容\n\nVector 的构造函数可以传入 capacityIncrement 参数，它的作用是在扩容时使容量 capacity 增长 capacityIncrement。如果这个参数的值小于等于 0，扩容时每次都令 capacity 为原来的两倍。\n\n### 2.4.3 与 ArrayList 的比较\n\n- Vector 是同步的，因此开销就比 ArrayList 要大，访问速度更慢。最好使用 ArrayList 而不是 Vector，因为同步操作完全可以由程序员自己来控制；\n- Vector 每次扩容请求其大小的 2 倍（也可以通过构造函数设置增长的容量），而 ArrayList 是 1.5 倍。\n\n## 2.5 HashSet\n\nSet集的元素可以**无序**但是**不可以重复**\n\n- HashSet是Set的一个重要实现类，称为哈希集\n- HashSet中是允许存在一个null元素的\n- 具有良好的存取和查找性能\n\nHashSet按Hash算法来存储集合中的元素，因此具有很好的存取和查找性能。底层数据结构是**哈希表**。\n\n### 2.5.1 内部存储机制\n\n当向HashSet集合中存入一个元素时:\n\n1. HashSet会调用该对象的**hashCode()**方法来得到该对象的hashCode值。\n\n2. 根据该hashCode值决定该对象在HashSet中的存储位置(下标)。\n\n3. 如果该位置已经存放了元素，则用**equals()**来判断两个元素是否相等。\n\n   如果相等，则覆盖。\n\n   如果不等，则用指针将两元素链接在一起。\n\nHashCode表用每个元素的hashCode值来计算其存储位置，从而可以自由增加HashCode的长度，并根据元素的hashCode值来访问元素。而不用一个个遍历索引去访问，**这就是它比数组快的原因**。\n\n### 2.5.2 重写hashCode()和equals()\n\n对于一个类，如果没有重写过hashCode()和equals()，则无法判断其对象的属性是否一致。\n\n```java\n @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        User user = (User) o;\n        return Objects.equals(name, user.name);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(name);\n    }\n```\n\n## 2.6 LinkedHashSet\n\nHashSet还有一个子类LinkedList、LinkedHashSet集合也是根据元素的hashCode值来决定元素的存储位置，但它同时使用链表维护元素的次序，这样使得元素看起来是以插入的顺序保存的，也就是说当遍历集合LinkedHashSet集合里的元素时，**集合将会按元素的添加顺序来访问集合里的元素**。\n输出集合里的元素时，元素顺序总是与添加顺序一致。**但是LinkedHashSet依然是HashSet，因此它不允许集合重复。**\n\n## 2.7 TreeSet\n\nTreeSet是SortedSet接口的实现类，TreeSet可以确保集合元素处于排序状态。\n\n### 2.7.1 内部存储机制\n\nTreeSet内部实现的是**红黑树**，默认整形排序为从小到大。\n\nTreeSet中的元素支持2种排序方式：**自然排序** 或者 **根据创建TreeSet 时提供的 Comparator 进行排序**。这取决于使用的构造方法。\n\n","slug":"容器","published":1,"updated":"2021-07-07T09:37:20.242Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqtag2ut0004mkvnd3415zxb","content":"<h1 id=\"1-概览\"><a href=\"#1-概览\" class=\"headerlink\" title=\"1. 概览\"></a>1. 概览</h1><p>容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对（两个对象）的映射表。</p>\n<h2 id=\"1-1-Collection\"><a href=\"#1-1-Collection\" class=\"headerlink\" title=\"1.1 Collection\"></a>1.1 <strong>Collection</strong></h2><p><img src=\"https://gitee.com/steve-lin08/image-host/raw/master/20210706192147.png\" alt=\"image-20210706192140377\"></p>\n<h3 id=\"1-Set\"><a href=\"#1-Set\" class=\"headerlink\" title=\"1. Set\"></a>1. Set</h3><ul>\n<li>TreeSet：基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet，HashSet 查找的时间复杂度为 O(1)，TreeSet 则为 O(logN)。</li>\n<li>HashSet：基于哈希表实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。</li>\n<li>LinkedHashSet：具有 HashSet 的查找效率，并且内部使用双向链表维护元素的插入顺序。</li>\n</ul>\n<h3 id=\"2-List\"><a href=\"#2-List\" class=\"headerlink\" title=\"2. List\"></a>2. List</h3><ul>\n<li>ArrayList：基于动态数组实现，支持随机访问。</li>\n<li>Vector：和 ArrayList 类似，但它是线程安全的。</li>\n<li>LinkedList：基于双向链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用作栈、队列和双向队列。</li>\n</ul>\n<h3 id=\"3-Queue\"><a href=\"#3-Queue\" class=\"headerlink\" title=\"3. Queue\"></a>3. Queue</h3><ul>\n<li>LinkedList：可以用它来实现双向队列。</li>\n<li>PriorityQueue：基于堆结构实现，可以用它来实现优先队列。</li>\n</ul>\n<h2 id=\"1-2-Map\"><a href=\"#1-2-Map\" class=\"headerlink\" title=\"1.2 Map\"></a>1.2 Map</h2><p><img src=\"https://gitee.com/steve-lin08/image-host/raw/master/20210706192429.png\" alt=\"Map\"></p>\n<ul>\n<li>TreeMap：基于红黑树实现。</li>\n<li>HashMap：基于哈希表实现。</li>\n<li>HashTable：和 HashMap 类似，但它是线程安全的，这意味着同一时刻多个线程同时写入 HashTable 不会导致数据不一致。它是遗留类，不应该去使用它，而是使用 ConcurrentHashMap 来支持线程安全，ConcurrentHashMap 的效率会更高，因为 ConcurrentHashMap 引入了分段锁。</li>\n<li>LinkedHashMap：使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用（LRU）顺序。</li>\n</ul>\n<h1 id=\"2-Collection\"><a href=\"#2-Collection\" class=\"headerlink\" title=\"2. Collection\"></a>2. Collection</h1><h2 id=\"2-1-Collection常用方法\"><a href=\"#2-1-Collection常用方法\" class=\"headerlink\" title=\"2.1 Collection常用方法\"></a>2.1 Collection常用方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(Object o)</span><span class=\"comment\">//添加对象到集合</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span><span class=\"comment\">//删除指定的对象</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span><span class=\"comment\">//返回当前集合中元素的数量</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object o)</span><span class=\"comment\">//查找集合中是否有指定的对象</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span><span class=\"comment\">//判断集合是否为空</span></span></span><br><span class=\"line\"><span class=\"function\">Iterator <span class=\"title\">iterator</span><span class=\"params\">()</span><span class=\"comment\">//返回一个迭代器</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">containsAll</span><span class=\"params\">(Collection c)</span><span class=\"comment\">//查找集合中是否有集合c中的元素</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(Collection c)</span><span class=\"comment\">//将集合c中所有的元素添加给该集合</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span><span class=\"comment\">//删除集合中所有元素</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">removeAll</span><span class=\"params\">(Collection c)</span><span class=\"comment\">//从集合中删除c集合中也有的元素</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">retainAll</span><span class=\"params\">(Collection c)</span><span class=\"comment\">//从集合中删除集合c中不包含的元素</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-ArrayList\"><a href=\"#2-2-ArrayList\" class=\"headerlink\" title=\"2.2 ArrayList\"></a>2.2 ArrayList</h2><p><strong>ArrayList可以顺序存放重复的元素，速度快，但是线程不安全。</strong></p>\n<p>因为 ArrayList 是基于数组实现的，所以支持快速随机访问。RandomAccess 接口标识着该类支持快速随机访问。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">RandomAccess</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></span></span><br></pre></td></tr></table></figure>\n\n<p>数组的默认大小为 10。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-1-扩容\"><a href=\"#2-2-1-扩容\" class=\"headerlink\" title=\"2.2.1 扩容\"></a>2.2.1 扩容</h3><p>添加元素时使用 ensureCapacityInternal() 方法来保证容量足够，如果不够时，需要使用 grow() 方法进行扩容，新容量的大小为 <code>oldCapacity + (oldCapacity &gt;&gt; 1)</code>，即 oldCapacity+oldCapacity/2。其中 oldCapacity &gt;&gt; 1 需要取整，所以新容量大约是旧容量的 1.5 倍左右。（oldCapacity 为偶数就是 1.5 倍，为奇数就是 1.5 倍-0.5）</p>\n<p>扩容操作需要调用 <code>Arrays.copyOf()</code> 把原数组整个复制到新数组中，这个操作代价很高，因此最好在创建 ArrayList 对象时就指定大概的容量大小，减少扩容操作的次数。</p>\n<h3 id=\"2-2-2-删除元素\"><a href=\"#2-2-2-删除元素\" class=\"headerlink\" title=\"2.2.2 删除元素\"></a>2.2.2 删除元素</h3><p>需要调用 System.arraycopy() 将 index+1 后面的元素都复制到 index 位置上，该操作的时间复杂度为 O(N)，可以看到 ArrayList 删除元素的代价是非常高的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    rangeCheck(index);</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    E oldValue = elementData(index);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> numMoved = size - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numMoved &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        System.arraycopy(elementData, index+<span class=\"number\">1</span>, elementData, index, numMoved);</span><br><span class=\"line\">    elementData[--size] = <span class=\"keyword\">null</span>; <span class=\"comment\">// clear to let GC do its work</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-LinkedList\"><a href=\"#2-3-LinkedList\" class=\"headerlink\" title=\"2.3 LinkedList\"></a>2.3 LinkedList</h2><p>基于双向链表实现，使用 Node 存储链表节点信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    E item;</span><br><span class=\"line\">    Node&lt;E&gt; next;</span><br><span class=\"line\">    Node&lt;E&gt; prev;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每个链表存储了 first 和 last 指针：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">transient</span> Node&lt;E&gt; first;</span><br><span class=\"line\"><span class=\"keyword\">transient</span> Node&lt;E&gt; last;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/steve-lin08/image-host/raw/master/20210706193430.png\" alt=\"image-20210706193430344\"></p>\n<h3 id=\"2-3-1-与ArrayList的比较\"><a href=\"#2-3-1-与ArrayList的比较\" class=\"headerlink\" title=\"2.3.1 与ArrayList的比较\"></a>2.3.1 与ArrayList的比较</h3><p>ArrayList 基于动态数组实现，LinkedList 基于双向链表实现。ArrayList 和 LinkedList 的区别可以归结为数组和链表的区别：</p>\n<ul>\n<li>数组支持随机访问，但插入删除的代价很高，需要移动大量元素；</li>\n<li>链表不支持随机访问，但插入删除只需要改变指针。</li>\n</ul>\n<h2 id=\"2-4-Vector\"><a href=\"#2-4-Vector\" class=\"headerlink\" title=\"2.4 Vector\"></a>2.4 Vector</h2><h3 id=\"2-4-1-同步\"><a href=\"#2-4-1-同步\" class=\"headerlink\" title=\"2.4.1 同步\"></a>2.4.1 同步</h3><p>它的实现与 ArrayList 类似，但是使用了 synchronized 进行同步。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    ensureCapacityHelper(elementCount + <span class=\"number\">1</span>);</span><br><span class=\"line\">    elementData[elementCount++] = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &gt;= elementCount)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArrayIndexOutOfBoundsException(index);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> elementData(index);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-2-扩容\"><a href=\"#2-4-2-扩容\" class=\"headerlink\" title=\"2.4.2 扩容\"></a>2.4.2 扩容</h3><p>Vector 的构造函数可以传入 capacityIncrement 参数，它的作用是在扩容时使容量 capacity 增长 capacityIncrement。如果这个参数的值小于等于 0，扩容时每次都令 capacity 为原来的两倍。</p>\n<h3 id=\"2-4-3-与-ArrayList-的比较\"><a href=\"#2-4-3-与-ArrayList-的比较\" class=\"headerlink\" title=\"2.4.3 与 ArrayList 的比较\"></a>2.4.3 与 ArrayList 的比较</h3><ul>\n<li>Vector 是同步的，因此开销就比 ArrayList 要大，访问速度更慢。最好使用 ArrayList 而不是 Vector，因为同步操作完全可以由程序员自己来控制；</li>\n<li>Vector 每次扩容请求其大小的 2 倍（也可以通过构造函数设置增长的容量），而 ArrayList 是 1.5 倍。</li>\n</ul>\n<h2 id=\"2-5-HashSet\"><a href=\"#2-5-HashSet\" class=\"headerlink\" title=\"2.5 HashSet\"></a>2.5 HashSet</h2><p>Set集的元素可以<strong>无序</strong>但是<strong>不可以重复</strong></p>\n<ul>\n<li>HashSet是Set的一个重要实现类，称为哈希集</li>\n<li>HashSet中是允许存在一个null元素的</li>\n<li>具有良好的存取和查找性能</li>\n</ul>\n<p>HashSet按Hash算法来存储集合中的元素，因此具有很好的存取和查找性能。底层数据结构是<strong>哈希表</strong>。</p>\n<h3 id=\"2-5-1-内部存储机制\"><a href=\"#2-5-1-内部存储机制\" class=\"headerlink\" title=\"2.5.1 内部存储机制\"></a>2.5.1 内部存储机制</h3><p>当向HashSet集合中存入一个元素时:</p>\n<ol>\n<li><p>HashSet会调用该对象的**hashCode()**方法来得到该对象的hashCode值。</p>\n</li>\n<li><p>根据该hashCode值决定该对象在HashSet中的存储位置(下标)。</p>\n</li>\n<li><p>如果该位置已经存放了元素，则用**equals()**来判断两个元素是否相等。</p>\n<p>如果相等，则覆盖。</p>\n<p>如果不等，则用指针将两元素链接在一起。</p>\n</li>\n</ol>\n<p>HashCode表用每个元素的hashCode值来计算其存储位置，从而可以自由增加HashCode的长度，并根据元素的hashCode值来访问元素。而不用一个个遍历索引去访问，<strong>这就是它比数组快的原因</strong>。</p>\n<h3 id=\"2-5-2-重写hashCode-和equals\"><a href=\"#2-5-2-重写hashCode-和equals\" class=\"headerlink\" title=\"2.5.2 重写hashCode()和equals()\"></a>2.5.2 重写hashCode()和equals()</h3><p>对于一个类，如果没有重写过hashCode()和equals()，则无法判断其对象的属性是否一致。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == o) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span> || getClass() != o.getClass()) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">       User user = (User) o;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> Objects.equals(name, user.name);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> Objects.hash(name);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-6-LinkedHashSet\"><a href=\"#2-6-LinkedHashSet\" class=\"headerlink\" title=\"2.6 LinkedHashSet\"></a>2.6 LinkedHashSet</h2><p>HashSet还有一个子类LinkedList、LinkedHashSet集合也是根据元素的hashCode值来决定元素的存储位置，但它同时使用链表维护元素的次序，这样使得元素看起来是以插入的顺序保存的，也就是说当遍历集合LinkedHashSet集合里的元素时，<strong>集合将会按元素的添加顺序来访问集合里的元素</strong>。<br>输出集合里的元素时，元素顺序总是与添加顺序一致。<strong>但是LinkedHashSet依然是HashSet，因此它不允许集合重复。</strong></p>\n<h2 id=\"2-7-TreeSet\"><a href=\"#2-7-TreeSet\" class=\"headerlink\" title=\"2.7 TreeSet\"></a>2.7 TreeSet</h2><p>TreeSet是SortedSet接口的实现类，TreeSet可以确保集合元素处于排序状态。</p>\n<h3 id=\"2-7-1-内部存储机制\"><a href=\"#2-7-1-内部存储机制\" class=\"headerlink\" title=\"2.7.1 内部存储机制\"></a>2.7.1 内部存储机制</h3><p>TreeSet内部实现的是<strong>红黑树</strong>，默认整形排序为从小到大。</p>\n<p>TreeSet中的元素支持2种排序方式：<strong>自然排序</strong> 或者 <strong>根据创建TreeSet 时提供的 Comparator 进行排序</strong>。这取决于使用的构造方法。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-概览\"><a href=\"#1-概览\" class=\"headerlink\" title=\"1. 概览\"></a>1. 概览</h1><p>容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对（两个对象）的映射表。</p>\n<h2 id=\"1-1-Collection\"><a href=\"#1-1-Collection\" class=\"headerlink\" title=\"1.1 Collection\"></a>1.1 <strong>Collection</strong></h2><p><img src=\"https://gitee.com/steve-lin08/image-host/raw/master/20210706192147.png\" alt=\"image-20210706192140377\"></p>\n<h3 id=\"1-Set\"><a href=\"#1-Set\" class=\"headerlink\" title=\"1. Set\"></a>1. Set</h3><ul>\n<li>TreeSet：基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet，HashSet 查找的时间复杂度为 O(1)，TreeSet 则为 O(logN)。</li>\n<li>HashSet：基于哈希表实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。</li>\n<li>LinkedHashSet：具有 HashSet 的查找效率，并且内部使用双向链表维护元素的插入顺序。</li>\n</ul>\n<h3 id=\"2-List\"><a href=\"#2-List\" class=\"headerlink\" title=\"2. List\"></a>2. List</h3><ul>\n<li>ArrayList：基于动态数组实现，支持随机访问。</li>\n<li>Vector：和 ArrayList 类似，但它是线程安全的。</li>\n<li>LinkedList：基于双向链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用作栈、队列和双向队列。</li>\n</ul>\n<h3 id=\"3-Queue\"><a href=\"#3-Queue\" class=\"headerlink\" title=\"3. Queue\"></a>3. Queue</h3><ul>\n<li>LinkedList：可以用它来实现双向队列。</li>\n<li>PriorityQueue：基于堆结构实现，可以用它来实现优先队列。</li>\n</ul>\n<h2 id=\"1-2-Map\"><a href=\"#1-2-Map\" class=\"headerlink\" title=\"1.2 Map\"></a>1.2 Map</h2><p><img src=\"https://gitee.com/steve-lin08/image-host/raw/master/20210706192429.png\" alt=\"Map\"></p>\n<ul>\n<li>TreeMap：基于红黑树实现。</li>\n<li>HashMap：基于哈希表实现。</li>\n<li>HashTable：和 HashMap 类似，但它是线程安全的，这意味着同一时刻多个线程同时写入 HashTable 不会导致数据不一致。它是遗留类，不应该去使用它，而是使用 ConcurrentHashMap 来支持线程安全，ConcurrentHashMap 的效率会更高，因为 ConcurrentHashMap 引入了分段锁。</li>\n<li>LinkedHashMap：使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用（LRU）顺序。</li>\n</ul>\n<h1 id=\"2-Collection\"><a href=\"#2-Collection\" class=\"headerlink\" title=\"2. Collection\"></a>2. Collection</h1><h2 id=\"2-1-Collection常用方法\"><a href=\"#2-1-Collection常用方法\" class=\"headerlink\" title=\"2.1 Collection常用方法\"></a>2.1 Collection常用方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(Object o)</span><span class=\"comment\">//添加对象到集合</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span><span class=\"comment\">//删除指定的对象</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span><span class=\"comment\">//返回当前集合中元素的数量</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object o)</span><span class=\"comment\">//查找集合中是否有指定的对象</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span><span class=\"comment\">//判断集合是否为空</span></span></span><br><span class=\"line\"><span class=\"function\">Iterator <span class=\"title\">iterator</span><span class=\"params\">()</span><span class=\"comment\">//返回一个迭代器</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">containsAll</span><span class=\"params\">(Collection c)</span><span class=\"comment\">//查找集合中是否有集合c中的元素</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(Collection c)</span><span class=\"comment\">//将集合c中所有的元素添加给该集合</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span><span class=\"comment\">//删除集合中所有元素</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">removeAll</span><span class=\"params\">(Collection c)</span><span class=\"comment\">//从集合中删除c集合中也有的元素</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">retainAll</span><span class=\"params\">(Collection c)</span><span class=\"comment\">//从集合中删除集合c中不包含的元素</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-ArrayList\"><a href=\"#2-2-ArrayList\" class=\"headerlink\" title=\"2.2 ArrayList\"></a>2.2 ArrayList</h2><p><strong>ArrayList可以顺序存放重复的元素，速度快，但是线程不安全。</strong></p>\n<p>因为 ArrayList 是基于数组实现的，所以支持快速随机访问。RandomAccess 接口标识着该类支持快速随机访问。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">RandomAccess</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></span></span><br></pre></td></tr></table></figure>\n\n<p>数组的默认大小为 10。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-1-扩容\"><a href=\"#2-2-1-扩容\" class=\"headerlink\" title=\"2.2.1 扩容\"></a>2.2.1 扩容</h3><p>添加元素时使用 ensureCapacityInternal() 方法来保证容量足够，如果不够时，需要使用 grow() 方法进行扩容，新容量的大小为 <code>oldCapacity + (oldCapacity &gt;&gt; 1)</code>，即 oldCapacity+oldCapacity/2。其中 oldCapacity &gt;&gt; 1 需要取整，所以新容量大约是旧容量的 1.5 倍左右。（oldCapacity 为偶数就是 1.5 倍，为奇数就是 1.5 倍-0.5）</p>\n<p>扩容操作需要调用 <code>Arrays.copyOf()</code> 把原数组整个复制到新数组中，这个操作代价很高，因此最好在创建 ArrayList 对象时就指定大概的容量大小，减少扩容操作的次数。</p>\n<h3 id=\"2-2-2-删除元素\"><a href=\"#2-2-2-删除元素\" class=\"headerlink\" title=\"2.2.2 删除元素\"></a>2.2.2 删除元素</h3><p>需要调用 System.arraycopy() 将 index+1 后面的元素都复制到 index 位置上，该操作的时间复杂度为 O(N)，可以看到 ArrayList 删除元素的代价是非常高的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    rangeCheck(index);</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    E oldValue = elementData(index);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> numMoved = size - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numMoved &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        System.arraycopy(elementData, index+<span class=\"number\">1</span>, elementData, index, numMoved);</span><br><span class=\"line\">    elementData[--size] = <span class=\"keyword\">null</span>; <span class=\"comment\">// clear to let GC do its work</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-LinkedList\"><a href=\"#2-3-LinkedList\" class=\"headerlink\" title=\"2.3 LinkedList\"></a>2.3 LinkedList</h2><p>基于双向链表实现，使用 Node 存储链表节点信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    E item;</span><br><span class=\"line\">    Node&lt;E&gt; next;</span><br><span class=\"line\">    Node&lt;E&gt; prev;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每个链表存储了 first 和 last 指针：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">transient</span> Node&lt;E&gt; first;</span><br><span class=\"line\"><span class=\"keyword\">transient</span> Node&lt;E&gt; last;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/steve-lin08/image-host/raw/master/20210706193430.png\" alt=\"image-20210706193430344\"></p>\n<h3 id=\"2-3-1-与ArrayList的比较\"><a href=\"#2-3-1-与ArrayList的比较\" class=\"headerlink\" title=\"2.3.1 与ArrayList的比较\"></a>2.3.1 与ArrayList的比较</h3><p>ArrayList 基于动态数组实现，LinkedList 基于双向链表实现。ArrayList 和 LinkedList 的区别可以归结为数组和链表的区别：</p>\n<ul>\n<li>数组支持随机访问，但插入删除的代价很高，需要移动大量元素；</li>\n<li>链表不支持随机访问，但插入删除只需要改变指针。</li>\n</ul>\n<h2 id=\"2-4-Vector\"><a href=\"#2-4-Vector\" class=\"headerlink\" title=\"2.4 Vector\"></a>2.4 Vector</h2><h3 id=\"2-4-1-同步\"><a href=\"#2-4-1-同步\" class=\"headerlink\" title=\"2.4.1 同步\"></a>2.4.1 同步</h3><p>它的实现与 ArrayList 类似，但是使用了 synchronized 进行同步。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    ensureCapacityHelper(elementCount + <span class=\"number\">1</span>);</span><br><span class=\"line\">    elementData[elementCount++] = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &gt;= elementCount)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArrayIndexOutOfBoundsException(index);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> elementData(index);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-2-扩容\"><a href=\"#2-4-2-扩容\" class=\"headerlink\" title=\"2.4.2 扩容\"></a>2.4.2 扩容</h3><p>Vector 的构造函数可以传入 capacityIncrement 参数，它的作用是在扩容时使容量 capacity 增长 capacityIncrement。如果这个参数的值小于等于 0，扩容时每次都令 capacity 为原来的两倍。</p>\n<h3 id=\"2-4-3-与-ArrayList-的比较\"><a href=\"#2-4-3-与-ArrayList-的比较\" class=\"headerlink\" title=\"2.4.3 与 ArrayList 的比较\"></a>2.4.3 与 ArrayList 的比较</h3><ul>\n<li>Vector 是同步的，因此开销就比 ArrayList 要大，访问速度更慢。最好使用 ArrayList 而不是 Vector，因为同步操作完全可以由程序员自己来控制；</li>\n<li>Vector 每次扩容请求其大小的 2 倍（也可以通过构造函数设置增长的容量），而 ArrayList 是 1.5 倍。</li>\n</ul>\n<h2 id=\"2-5-HashSet\"><a href=\"#2-5-HashSet\" class=\"headerlink\" title=\"2.5 HashSet\"></a>2.5 HashSet</h2><p>Set集的元素可以<strong>无序</strong>但是<strong>不可以重复</strong></p>\n<ul>\n<li>HashSet是Set的一个重要实现类，称为哈希集</li>\n<li>HashSet中是允许存在一个null元素的</li>\n<li>具有良好的存取和查找性能</li>\n</ul>\n<p>HashSet按Hash算法来存储集合中的元素，因此具有很好的存取和查找性能。底层数据结构是<strong>哈希表</strong>。</p>\n<h3 id=\"2-5-1-内部存储机制\"><a href=\"#2-5-1-内部存储机制\" class=\"headerlink\" title=\"2.5.1 内部存储机制\"></a>2.5.1 内部存储机制</h3><p>当向HashSet集合中存入一个元素时:</p>\n<ol>\n<li><p>HashSet会调用该对象的**hashCode()**方法来得到该对象的hashCode值。</p>\n</li>\n<li><p>根据该hashCode值决定该对象在HashSet中的存储位置(下标)。</p>\n</li>\n<li><p>如果该位置已经存放了元素，则用**equals()**来判断两个元素是否相等。</p>\n<p>如果相等，则覆盖。</p>\n<p>如果不等，则用指针将两元素链接在一起。</p>\n</li>\n</ol>\n<p>HashCode表用每个元素的hashCode值来计算其存储位置，从而可以自由增加HashCode的长度，并根据元素的hashCode值来访问元素。而不用一个个遍历索引去访问，<strong>这就是它比数组快的原因</strong>。</p>\n<h3 id=\"2-5-2-重写hashCode-和equals\"><a href=\"#2-5-2-重写hashCode-和equals\" class=\"headerlink\" title=\"2.5.2 重写hashCode()和equals()\"></a>2.5.2 重写hashCode()和equals()</h3><p>对于一个类，如果没有重写过hashCode()和equals()，则无法判断其对象的属性是否一致。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == o) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span> || getClass() != o.getClass()) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">       User user = (User) o;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> Objects.equals(name, user.name);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> Objects.hash(name);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-6-LinkedHashSet\"><a href=\"#2-6-LinkedHashSet\" class=\"headerlink\" title=\"2.6 LinkedHashSet\"></a>2.6 LinkedHashSet</h2><p>HashSet还有一个子类LinkedList、LinkedHashSet集合也是根据元素的hashCode值来决定元素的存储位置，但它同时使用链表维护元素的次序，这样使得元素看起来是以插入的顺序保存的，也就是说当遍历集合LinkedHashSet集合里的元素时，<strong>集合将会按元素的添加顺序来访问集合里的元素</strong>。<br>输出集合里的元素时，元素顺序总是与添加顺序一致。<strong>但是LinkedHashSet依然是HashSet，因此它不允许集合重复。</strong></p>\n<h2 id=\"2-7-TreeSet\"><a href=\"#2-7-TreeSet\" class=\"headerlink\" title=\"2.7 TreeSet\"></a>2.7 TreeSet</h2><p>TreeSet是SortedSet接口的实现类，TreeSet可以确保集合元素处于排序状态。</p>\n<h3 id=\"2-7-1-内部存储机制\"><a href=\"#2-7-1-内部存储机制\" class=\"headerlink\" title=\"2.7.1 内部存储机制\"></a>2.7.1 内部存储机制</h3><p>TreeSet内部实现的是<strong>红黑树</strong>，默认整形排序为从小到大。</p>\n<p>TreeSet中的元素支持2种排序方式：<strong>自然排序</strong> 或者 <strong>根据创建TreeSet 时提供的 Comparator 进行排序</strong>。这取决于使用的构造方法。</p>\n"},{"title":"Java枚举类","date":"2021-06-26T16:00:00.000Z","cover":"https://images.pexels.com/photos/6100565/pexels-photo-6100565.jpeg?auto=compress&cs=tinysrgb&h=750&w=1260","copyright_author":"SteveLin","toc_number":false,"_content":"\n\n## 1. 简介\n\n`enum` 的全称为 enumeration， 是 JDK5 中引入的特性。\n\n在 Java 中，被 `enum` 关键字修饰的类型就是枚举类型。形式如下：\n\n```java\nenum ColorEn { RED, GREEN, BLUE }\n```\n\n- 当需要定义一组常量时，建议使用枚举类。\n- 如果枚举类中只有一个对象，则可以作为单例模式实现方式。\n\n**枚举的好处**：可以将常量组织起来，统一进行管理。\n\n**枚举的典型应用场景**：错误码、状态机等。\n\n## 2. 枚举的本质\n\n`java.lang.Enum`类声明\n\n```java\npublic abstract class Enum<E extends Enum<E>>\n        implements Comparable<E>, Serializable { ... }\n```\n\n> 说明：\n>\n> **枚举的本质是 `java.lang.Enum` 的子类。**\n>\n> 尽管 `enum` 看起来像是一种新的数据类型，事实上，**enum 是一种受限制的类，并且具有自己的方法**。枚举这种特殊的类因为被修饰为 `final`，所以不能继承其他类。\n>\n> 定义的枚举值，会被默认修饰为 `public static final` ，从修饰关键字，即可看出枚举值本质上是静态常量。\n\n## 3. 枚举的方法\n\n在 enum 中，提供了一些基本方法：\n\n- `values()`：返回 enum 实例的数组，而且该数组中的元素严格保持在 enum 中声明时的顺序。\n- `valuesOf(String name)`：返回枚举类中对象名是name的对象。\n- `name()`：返回实例名。\n- `ordinal()`：返回实例声明时的次序，从 0 开始。\n- `getDeclaringClass()`：返回实例所属的 enum 类型。\n- `equals()` ：判断是否为同一个对象。\n\n可以使用 `==` 来比较`enum`实例。\n\n此外，`java.lang.Enum`实现了`Comparable`和 `Serializable` 接口，所以也提供 `compareTo()` 方法。\n\n**例：展示 enum 的基本方法**\n\n[TexasHoldem.java](D:\\IDEAPrograms\\project1\\src\\com\\pro\\enu\\TexasHoldem.java)\n\n## 4. 枚举的特性\n\n枚举的特性，归结起来就是一句话：\n\n> **除了不能继承，基本上可以将 `enum` 看做一个常规的类**。\n\n但是这句话需要拆分去理解，让我们细细道来。\n\n### 4.1. 基本特性\n\n**如果枚举中没有定义方法，也可以在最后一个实例后面加逗号、分号或什么都不加。**\n\n如果枚举中没有定义方法，**枚举值默认为从 0 开始的有序数值**。以 Color 枚举类型举例，它的枚举常量依次为 `RED：0，GREEN：1，BLUE：2`。\n\n### 4.2. 枚举可以添加方法\n\n如何为枚举显式的赋值。\n\n#### 4.2.1 枚举可以添加普通方法、静态方法、抽象方法、构造方法\n\nJava 虽然不能直接为实例赋值，但是它有更优秀的解决方案：**为 enum 添加方法来间接实现显式赋值**。\n\n创建 `enum` 时，可以为其添加多种方法，甚至可以为其添加构造方法。\n\n**注意：如果要为 enum 定义方法，那么必须在 enum 的最后一个实例尾部添加一个分号。此外，在 enum 中，必须先定义实例，不能将字段或方法定义在实例前面。否则，编译器会报错。**\n\n**例：全面展示如何在枚举中定义普通方法、静态方法、抽象方法、构造方法**\n\n```java\npublic enum ErrorCodeEn {\n    OK(0) {\n        @Override\n        public String getDescription() {\n            return \"成功\";\n        }\n    },\n    ERROR_A(100) {\n        @Override\n        public String getDescription() {\n            return \"错误A\";\n        }\n    },\n    ERROR_B(200) {\n        @Override\n        public String getDescription() {\n            return \"错误B\";\n        }\n    };\n\n    private int code;\n\n    // 构造方法：enum的构造方法只能被声明为private权限或不声明权限\n    private ErrorCodeEn(int number) { // 构造方法\n        this.code = number;\n    }\n\n    public int getCode() { // 普通方法\n        return code;\n    } // 普通方法\n\n    public abstract String getDescription(); // 抽象方法\n\n    public static void main(String args[]) { // 静态方法\n        for (ErrorCodeEn s : ErrorCodeEn.values()) {\n            System.out.println(\"code: \" + s.getCode() + \", description: \" + s.getDescription());\n        }\n    }\n}\n// Output:\n// code: 0, description: 成功\n// code: 100, description: 错误A\n// code: 200, description: 错误B\n```\n\n### 4.3 枚举实现接口\n\n枚举可以实现接口，但是不能继承。\n\n因为 `enum` 实际上都继承自 `java.lang.Enum` 类，而 Java 不支持多重继承，所以 `enum` 不能再继承其他类，当然也不能继承另一个 `enum`。\n\n","source":"_posts/枚举类和注解.md","raw":"---\ntitle: Java枚举类\ndate: 2021.6.27\ntags:\n    - Java\ncover: https://images.pexels.com/photos/6100565/pexels-photo-6100565.jpeg?auto=compress&cs=tinysrgb&h=750&w=1260\ncopyright_author: SteveLin\ntoc_number: false\n\n---\n\n\n## 1. 简介\n\n`enum` 的全称为 enumeration， 是 JDK5 中引入的特性。\n\n在 Java 中，被 `enum` 关键字修饰的类型就是枚举类型。形式如下：\n\n```java\nenum ColorEn { RED, GREEN, BLUE }\n```\n\n- 当需要定义一组常量时，建议使用枚举类。\n- 如果枚举类中只有一个对象，则可以作为单例模式实现方式。\n\n**枚举的好处**：可以将常量组织起来，统一进行管理。\n\n**枚举的典型应用场景**：错误码、状态机等。\n\n## 2. 枚举的本质\n\n`java.lang.Enum`类声明\n\n```java\npublic abstract class Enum<E extends Enum<E>>\n        implements Comparable<E>, Serializable { ... }\n```\n\n> 说明：\n>\n> **枚举的本质是 `java.lang.Enum` 的子类。**\n>\n> 尽管 `enum` 看起来像是一种新的数据类型，事实上，**enum 是一种受限制的类，并且具有自己的方法**。枚举这种特殊的类因为被修饰为 `final`，所以不能继承其他类。\n>\n> 定义的枚举值，会被默认修饰为 `public static final` ，从修饰关键字，即可看出枚举值本质上是静态常量。\n\n## 3. 枚举的方法\n\n在 enum 中，提供了一些基本方法：\n\n- `values()`：返回 enum 实例的数组，而且该数组中的元素严格保持在 enum 中声明时的顺序。\n- `valuesOf(String name)`：返回枚举类中对象名是name的对象。\n- `name()`：返回实例名。\n- `ordinal()`：返回实例声明时的次序，从 0 开始。\n- `getDeclaringClass()`：返回实例所属的 enum 类型。\n- `equals()` ：判断是否为同一个对象。\n\n可以使用 `==` 来比较`enum`实例。\n\n此外，`java.lang.Enum`实现了`Comparable`和 `Serializable` 接口，所以也提供 `compareTo()` 方法。\n\n**例：展示 enum 的基本方法**\n\n[TexasHoldem.java](D:\\IDEAPrograms\\project1\\src\\com\\pro\\enu\\TexasHoldem.java)\n\n## 4. 枚举的特性\n\n枚举的特性，归结起来就是一句话：\n\n> **除了不能继承，基本上可以将 `enum` 看做一个常规的类**。\n\n但是这句话需要拆分去理解，让我们细细道来。\n\n### 4.1. 基本特性\n\n**如果枚举中没有定义方法，也可以在最后一个实例后面加逗号、分号或什么都不加。**\n\n如果枚举中没有定义方法，**枚举值默认为从 0 开始的有序数值**。以 Color 枚举类型举例，它的枚举常量依次为 `RED：0，GREEN：1，BLUE：2`。\n\n### 4.2. 枚举可以添加方法\n\n如何为枚举显式的赋值。\n\n#### 4.2.1 枚举可以添加普通方法、静态方法、抽象方法、构造方法\n\nJava 虽然不能直接为实例赋值，但是它有更优秀的解决方案：**为 enum 添加方法来间接实现显式赋值**。\n\n创建 `enum` 时，可以为其添加多种方法，甚至可以为其添加构造方法。\n\n**注意：如果要为 enum 定义方法，那么必须在 enum 的最后一个实例尾部添加一个分号。此外，在 enum 中，必须先定义实例，不能将字段或方法定义在实例前面。否则，编译器会报错。**\n\n**例：全面展示如何在枚举中定义普通方法、静态方法、抽象方法、构造方法**\n\n```java\npublic enum ErrorCodeEn {\n    OK(0) {\n        @Override\n        public String getDescription() {\n            return \"成功\";\n        }\n    },\n    ERROR_A(100) {\n        @Override\n        public String getDescription() {\n            return \"错误A\";\n        }\n    },\n    ERROR_B(200) {\n        @Override\n        public String getDescription() {\n            return \"错误B\";\n        }\n    };\n\n    private int code;\n\n    // 构造方法：enum的构造方法只能被声明为private权限或不声明权限\n    private ErrorCodeEn(int number) { // 构造方法\n        this.code = number;\n    }\n\n    public int getCode() { // 普通方法\n        return code;\n    } // 普通方法\n\n    public abstract String getDescription(); // 抽象方法\n\n    public static void main(String args[]) { // 静态方法\n        for (ErrorCodeEn s : ErrorCodeEn.values()) {\n            System.out.println(\"code: \" + s.getCode() + \", description: \" + s.getDescription());\n        }\n    }\n}\n// Output:\n// code: 0, description: 成功\n// code: 100, description: 错误A\n// code: 200, description: 错误B\n```\n\n### 4.3 枚举实现接口\n\n枚举可以实现接口，但是不能继承。\n\n因为 `enum` 实际上都继承自 `java.lang.Enum` 类，而 Java 不支持多重继承，所以 `enum` 不能再继承其他类，当然也不能继承另一个 `enum`。\n\n","slug":"枚举类和注解","published":1,"updated":"2021-07-02T08:16:55.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqtag2ux0005mkvn9fwv9uck","content":"<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><p><code>enum</code> 的全称为 enumeration， 是 JDK5 中引入的特性。</p>\n<p>在 Java 中，被 <code>enum</code> 关键字修饰的类型就是枚举类型。形式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">ColorEn</span> </span>&#123; RED, GREEN, BLUE &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当需要定义一组常量时，建议使用枚举类。</li>\n<li>如果枚举类中只有一个对象，则可以作为单例模式实现方式。</li>\n</ul>\n<p><strong>枚举的好处</strong>：可以将常量组织起来，统一进行管理。</p>\n<p><strong>枚举的典型应用场景</strong>：错误码、状态机等。</p>\n<h2 id=\"2-枚举的本质\"><a href=\"#2-枚举的本质\" class=\"headerlink\" title=\"2. 枚举的本质\"></a>2. 枚举的本质</h2><p><code>java.lang.Enum</code>类声明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Enum</span>&lt;<span class=\"title\">E</span> <span class=\"keyword\">extends</span> <span class=\"title\">Enum</span>&lt;<span class=\"title\">E</span>&gt;&gt;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Serializable</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>说明：</p>\n<p><strong>枚举的本质是 <code>java.lang.Enum</code> 的子类。</strong></p>\n<p>尽管 <code>enum</code> 看起来像是一种新的数据类型，事实上，<strong>enum 是一种受限制的类，并且具有自己的方法</strong>。枚举这种特殊的类因为被修饰为 <code>final</code>，所以不能继承其他类。</p>\n<p>定义的枚举值，会被默认修饰为 <code>public static final</code> ，从修饰关键字，即可看出枚举值本质上是静态常量。</p>\n</blockquote>\n<h2 id=\"3-枚举的方法\"><a href=\"#3-枚举的方法\" class=\"headerlink\" title=\"3. 枚举的方法\"></a>3. 枚举的方法</h2><p>在 enum 中，提供了一些基本方法：</p>\n<ul>\n<li><code>values()</code>：返回 enum 实例的数组，而且该数组中的元素严格保持在 enum 中声明时的顺序。</li>\n<li><code>valuesOf(String name)</code>：返回枚举类中对象名是name的对象。</li>\n<li><code>name()</code>：返回实例名。</li>\n<li><code>ordinal()</code>：返回实例声明时的次序，从 0 开始。</li>\n<li><code>getDeclaringClass()</code>：返回实例所属的 enum 类型。</li>\n<li><code>equals()</code> ：判断是否为同一个对象。</li>\n</ul>\n<p>可以使用 <code>==</code> 来比较<code>enum</code>实例。</p>\n<p>此外，<code>java.lang.Enum</code>实现了<code>Comparable</code>和 <code>Serializable</code> 接口，所以也提供 <code>compareTo()</code> 方法。</p>\n<p><strong>例：展示 enum 的基本方法</strong></p>\n<p><a href=\"D:\\IDEAPrograms\\project1\\src\\com\\pro\\enu\\TexasHoldem.java\">TexasHoldem.java</a></p>\n<h2 id=\"4-枚举的特性\"><a href=\"#4-枚举的特性\" class=\"headerlink\" title=\"4. 枚举的特性\"></a>4. 枚举的特性</h2><p>枚举的特性，归结起来就是一句话：</p>\n<blockquote>\n<p><strong>除了不能继承，基本上可以将 <code>enum</code> 看做一个常规的类</strong>。</p>\n</blockquote>\n<p>但是这句话需要拆分去理解，让我们细细道来。</p>\n<h3 id=\"4-1-基本特性\"><a href=\"#4-1-基本特性\" class=\"headerlink\" title=\"4.1. 基本特性\"></a>4.1. 基本特性</h3><p><strong>如果枚举中没有定义方法，也可以在最后一个实例后面加逗号、分号或什么都不加。</strong></p>\n<p>如果枚举中没有定义方法，<strong>枚举值默认为从 0 开始的有序数值</strong>。以 Color 枚举类型举例，它的枚举常量依次为 <code>RED：0，GREEN：1，BLUE：2</code>。</p>\n<h3 id=\"4-2-枚举可以添加方法\"><a href=\"#4-2-枚举可以添加方法\" class=\"headerlink\" title=\"4.2. 枚举可以添加方法\"></a>4.2. 枚举可以添加方法</h3><p>如何为枚举显式的赋值。</p>\n<h4 id=\"4-2-1-枚举可以添加普通方法、静态方法、抽象方法、构造方法\"><a href=\"#4-2-1-枚举可以添加普通方法、静态方法、抽象方法、构造方法\" class=\"headerlink\" title=\"4.2.1 枚举可以添加普通方法、静态方法、抽象方法、构造方法\"></a>4.2.1 枚举可以添加普通方法、静态方法、抽象方法、构造方法</h4><p>Java 虽然不能直接为实例赋值，但是它有更优秀的解决方案：<strong>为 enum 添加方法来间接实现显式赋值</strong>。</p>\n<p>创建 <code>enum</code> 时，可以为其添加多种方法，甚至可以为其添加构造方法。</p>\n<p><strong>注意：如果要为 enum 定义方法，那么必须在 enum 的最后一个实例尾部添加一个分号。此外，在 enum 中，必须先定义实例，不能将字段或方法定义在实例前面。否则，编译器会报错。</strong></p>\n<p><strong>例：全面展示如何在枚举中定义普通方法、静态方法、抽象方法、构造方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">ErrorCodeEn</span> </span>&#123;</span><br><span class=\"line\">    OK(<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDescription</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;成功&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ERROR_A(<span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDescription</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;错误A&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ERROR_B(<span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDescription</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;错误B&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> code;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造方法：enum的构造方法只能被声明为private权限或不声明权限</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ErrorCodeEn</span><span class=\"params\">(<span class=\"keyword\">int</span> number)</span> </span>&#123; <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.code = number;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCode</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 普通方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">    &#125; <span class=\"comment\">// 普通方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title\">getDescription</span><span class=\"params\">()</span></span>; <span class=\"comment\">// 抽象方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123; <span class=\"comment\">// 静态方法</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ErrorCodeEn s : ErrorCodeEn.values()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;code: &quot;</span> + s.getCode() + <span class=\"string\">&quot;, description: &quot;</span> + s.getDescription());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Output:</span></span><br><span class=\"line\"><span class=\"comment\">// code: 0, description: 成功</span></span><br><span class=\"line\"><span class=\"comment\">// code: 100, description: 错误A</span></span><br><span class=\"line\"><span class=\"comment\">// code: 200, description: 错误B</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-枚举实现接口\"><a href=\"#4-3-枚举实现接口\" class=\"headerlink\" title=\"4.3 枚举实现接口\"></a>4.3 枚举实现接口</h3><p>枚举可以实现接口，但是不能继承。</p>\n<p>因为 <code>enum</code> 实际上都继承自 <code>java.lang.Enum</code> 类，而 Java 不支持多重继承，所以 <code>enum</code> 不能再继承其他类，当然也不能继承另一个 <code>enum</code>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><p><code>enum</code> 的全称为 enumeration， 是 JDK5 中引入的特性。</p>\n<p>在 Java 中，被 <code>enum</code> 关键字修饰的类型就是枚举类型。形式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">ColorEn</span> </span>&#123; RED, GREEN, BLUE &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当需要定义一组常量时，建议使用枚举类。</li>\n<li>如果枚举类中只有一个对象，则可以作为单例模式实现方式。</li>\n</ul>\n<p><strong>枚举的好处</strong>：可以将常量组织起来，统一进行管理。</p>\n<p><strong>枚举的典型应用场景</strong>：错误码、状态机等。</p>\n<h2 id=\"2-枚举的本质\"><a href=\"#2-枚举的本质\" class=\"headerlink\" title=\"2. 枚举的本质\"></a>2. 枚举的本质</h2><p><code>java.lang.Enum</code>类声明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Enum</span>&lt;<span class=\"title\">E</span> <span class=\"keyword\">extends</span> <span class=\"title\">Enum</span>&lt;<span class=\"title\">E</span>&gt;&gt;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Serializable</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>说明：</p>\n<p><strong>枚举的本质是 <code>java.lang.Enum</code> 的子类。</strong></p>\n<p>尽管 <code>enum</code> 看起来像是一种新的数据类型，事实上，<strong>enum 是一种受限制的类，并且具有自己的方法</strong>。枚举这种特殊的类因为被修饰为 <code>final</code>，所以不能继承其他类。</p>\n<p>定义的枚举值，会被默认修饰为 <code>public static final</code> ，从修饰关键字，即可看出枚举值本质上是静态常量。</p>\n</blockquote>\n<h2 id=\"3-枚举的方法\"><a href=\"#3-枚举的方法\" class=\"headerlink\" title=\"3. 枚举的方法\"></a>3. 枚举的方法</h2><p>在 enum 中，提供了一些基本方法：</p>\n<ul>\n<li><code>values()</code>：返回 enum 实例的数组，而且该数组中的元素严格保持在 enum 中声明时的顺序。</li>\n<li><code>valuesOf(String name)</code>：返回枚举类中对象名是name的对象。</li>\n<li><code>name()</code>：返回实例名。</li>\n<li><code>ordinal()</code>：返回实例声明时的次序，从 0 开始。</li>\n<li><code>getDeclaringClass()</code>：返回实例所属的 enum 类型。</li>\n<li><code>equals()</code> ：判断是否为同一个对象。</li>\n</ul>\n<p>可以使用 <code>==</code> 来比较<code>enum</code>实例。</p>\n<p>此外，<code>java.lang.Enum</code>实现了<code>Comparable</code>和 <code>Serializable</code> 接口，所以也提供 <code>compareTo()</code> 方法。</p>\n<p><strong>例：展示 enum 的基本方法</strong></p>\n<p><a href=\"D:\\IDEAPrograms\\project1\\src\\com\\pro\\enu\\TexasHoldem.java\">TexasHoldem.java</a></p>\n<h2 id=\"4-枚举的特性\"><a href=\"#4-枚举的特性\" class=\"headerlink\" title=\"4. 枚举的特性\"></a>4. 枚举的特性</h2><p>枚举的特性，归结起来就是一句话：</p>\n<blockquote>\n<p><strong>除了不能继承，基本上可以将 <code>enum</code> 看做一个常规的类</strong>。</p>\n</blockquote>\n<p>但是这句话需要拆分去理解，让我们细细道来。</p>\n<h3 id=\"4-1-基本特性\"><a href=\"#4-1-基本特性\" class=\"headerlink\" title=\"4.1. 基本特性\"></a>4.1. 基本特性</h3><p><strong>如果枚举中没有定义方法，也可以在最后一个实例后面加逗号、分号或什么都不加。</strong></p>\n<p>如果枚举中没有定义方法，<strong>枚举值默认为从 0 开始的有序数值</strong>。以 Color 枚举类型举例，它的枚举常量依次为 <code>RED：0，GREEN：1，BLUE：2</code>。</p>\n<h3 id=\"4-2-枚举可以添加方法\"><a href=\"#4-2-枚举可以添加方法\" class=\"headerlink\" title=\"4.2. 枚举可以添加方法\"></a>4.2. 枚举可以添加方法</h3><p>如何为枚举显式的赋值。</p>\n<h4 id=\"4-2-1-枚举可以添加普通方法、静态方法、抽象方法、构造方法\"><a href=\"#4-2-1-枚举可以添加普通方法、静态方法、抽象方法、构造方法\" class=\"headerlink\" title=\"4.2.1 枚举可以添加普通方法、静态方法、抽象方法、构造方法\"></a>4.2.1 枚举可以添加普通方法、静态方法、抽象方法、构造方法</h4><p>Java 虽然不能直接为实例赋值，但是它有更优秀的解决方案：<strong>为 enum 添加方法来间接实现显式赋值</strong>。</p>\n<p>创建 <code>enum</code> 时，可以为其添加多种方法，甚至可以为其添加构造方法。</p>\n<p><strong>注意：如果要为 enum 定义方法，那么必须在 enum 的最后一个实例尾部添加一个分号。此外，在 enum 中，必须先定义实例，不能将字段或方法定义在实例前面。否则，编译器会报错。</strong></p>\n<p><strong>例：全面展示如何在枚举中定义普通方法、静态方法、抽象方法、构造方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">ErrorCodeEn</span> </span>&#123;</span><br><span class=\"line\">    OK(<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDescription</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;成功&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ERROR_A(<span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDescription</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;错误A&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ERROR_B(<span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDescription</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;错误B&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> code;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造方法：enum的构造方法只能被声明为private权限或不声明权限</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ErrorCodeEn</span><span class=\"params\">(<span class=\"keyword\">int</span> number)</span> </span>&#123; <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.code = number;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCode</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 普通方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">    &#125; <span class=\"comment\">// 普通方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title\">getDescription</span><span class=\"params\">()</span></span>; <span class=\"comment\">// 抽象方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123; <span class=\"comment\">// 静态方法</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ErrorCodeEn s : ErrorCodeEn.values()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;code: &quot;</span> + s.getCode() + <span class=\"string\">&quot;, description: &quot;</span> + s.getDescription());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Output:</span></span><br><span class=\"line\"><span class=\"comment\">// code: 0, description: 成功</span></span><br><span class=\"line\"><span class=\"comment\">// code: 100, description: 错误A</span></span><br><span class=\"line\"><span class=\"comment\">// code: 200, description: 错误B</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-枚举实现接口\"><a href=\"#4-3-枚举实现接口\" class=\"headerlink\" title=\"4.3 枚举实现接口\"></a>4.3 枚举实现接口</h3><p>枚举可以实现接口，但是不能继承。</p>\n<p>因为 <code>enum</code> 实际上都继承自 <code>java.lang.Enum</code> 类，而 Java 不支持多重继承，所以 <code>enum</code> 不能再继承其他类，当然也不能继承另一个 <code>enum</code>。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckqtag2uh0001mkvnc8mwhao0","tag_id":"ckqtag2uq0003mkvn2mcugzoq","_id":"ckqtag2v00007mkvn64qt96kr"},{"post_id":"ckqtag2un0002mkvnhymibksa","tag_id":"ckqtag2uz0006mkvn66feeo7j","_id":"ckqtag2v5000cmkvngtiuhr1z"},{"post_id":"ckqtag2un0002mkvnhymibksa","tag_id":"ckqtag2v00008mkvn7k7054lp","_id":"ckqtag2v5000dmkvn8c50bibw"},{"post_id":"ckqtag2un0002mkvnhymibksa","tag_id":"ckqtag2uq0003mkvn2mcugzoq","_id":"ckqtag2v6000fmkvng1pb4wlf"},{"post_id":"ckqtag2un0002mkvnhymibksa","tag_id":"ckqtag2v3000amkvn0tl97weu","_id":"ckqtag2v6000gmkvn38baa432"},{"post_id":"ckqtag2ut0004mkvnd3415zxb","tag_id":"ckqtag2v4000bmkvnblfqblxd","_id":"ckqtag2v6000hmkvnfcvm27r2"},{"post_id":"ckqtag2ux0005mkvn9fwv9uck","tag_id":"ckqtag2v4000bmkvnblfqblxd","_id":"ckqtag2v7000imkvnb95a9fs7"}],"Tag":[{"name":"Git","_id":"ckqtag2uq0003mkvn2mcugzoq"},{"name":"Linux","_id":"ckqtag2uz0006mkvn66feeo7j"},{"name":"Hexo","_id":"ckqtag2v00008mkvn7k7054lp"},{"name":"blog","_id":"ckqtag2v3000amkvn0tl97weu"},{"name":"Java","_id":"ckqtag2v4000bmkvnblfqblxd"}]}}